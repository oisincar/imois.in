<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>im_oisin</title><link>https://imois.in/</link><description>A home for my random programming &amp; maths projects.</description><atom:link href="https://imois.in/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:oisincar@gmail.com"&gt;Oisin Carroll&lt;/a&gt; </copyright><lastBuildDate>Mon, 24 Aug 2020 00:57:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Card Network</title><link>https://imois.in/posts/card-network/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-org75853ff" class="outline-2"&gt;
&lt;h2 id="org75853ff"&gt;Business Card Neural Network&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org75853ff"&gt;
&lt;p&gt;
I recently came across Andrew Kensler's fascinating &lt;a href="https://fabiensanglard.net/rayTracing_back_of_business_card/"&gt;Business Card Raytracer&lt;/a&gt;. His code, in just 1337 bytes, generates a full raytraced image complete with depth of field, reflections, a sky gradient, and a textured floor. In a similar vein, I set out to create a full neural network that could fit on the back of a business card. The code below is the result, creating a 3-layer fully-connected neural network with leaky-relu activations and training it to generate a small image of my name.
&lt;/p&gt;

&lt;div style="text-align:center"&gt;
&lt;div style="display:inline-block; text-align:left"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nl"&gt;K&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;];}&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;}};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[]{&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)};&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500337&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;6.14&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x1e\0&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="se"&gt;\0\b\x01\0&lt;/span&gt;&lt;span class="s"&gt;@H&lt;/span&gt;&lt;span class="se"&gt;\374\377&lt;/span&gt;&lt;span class="s"&gt;B&lt;/span&gt;&lt;span class="se"&gt;\x12&lt;/span&gt;&lt;span class="s"&gt;@&lt;/span&gt;&lt;span class="se"&gt;\x18\x12&lt;/span&gt;&lt;span class="s"&gt;G&lt;/span&gt;&lt;span class="se"&gt;\302&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="se"&gt;\x10&lt;/span&gt;&lt;span class="s"&gt;@&lt;/span&gt;&lt;span class="se"&gt;\x12\372\377\221\x10\0\0\200\0\0\0&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="se"&gt;\x02&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))};&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" .,-*oO##"&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[9A"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;   --- Oisin Carroll ---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="s"&gt; gh:Oisincar  web:imois.in"&lt;/span&gt;&lt;span class="p"&gt;);}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
You can view the output here by clicking the play button. (I hate to admit it's not actually running the code in the browser :P, but you'll see the same or similar output if you run the code yourself).
&lt;/p&gt;

&lt;div style="text-align:right; position:relative;"&gt;
&lt;div class="terminal-code" id="div1" style="height:13em; padding:0.5em"&gt;&amp;gt; ./card_network&lt;/div&gt;
&lt;button class="button-pp" style="position:absolute; top:15px; right:5px;"&gt;&lt;/button&gt;
&lt;script src="https://imois.in/assets/js/card_network/fk_network.js"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;
The code is only 878 characters, and (as mentioned previously) creates and trains a small neural network. I'm sure it's possible to make it shorter still, but I was happy enough to get this far! I think making it any shorter would make it impossible to reason about, now at least new layers can be added or removed easily and the forward/back propagation is pretty neat! (I'm not biased I swear).
&lt;/p&gt;

&lt;p&gt;
Here's a small breakdown of how it works.
&lt;/p&gt;

&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col"&gt;

&lt;p&gt;
Define simple imports and typedefs. The two floats define constants used for the 'leak' of leaky relu, (I.e. the \(K\) in \(f(x) = max(Kx, x)\)), and the learning rate.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;		&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col"&gt;

&lt;p&gt;
Start of the layer struct &lt;code class="src src-cpp"&gt;L&lt;/code&gt;. The constructor takes the input and output sizes, and initializes a weights matrix in an approximation of &lt;a href="https://towardsdatascience.com/weight-initialization-in-neural-networks-a-journey-from-the-basics-to-kaiming-954fb9b47c79"&gt;Xavier Initilization&lt;/a&gt;. Ideally, the random variable would be normally distributed, but linearly seems to work decently too!
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;	  &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="nf"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nl"&gt;K&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="nf"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;];}&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;}};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col"&gt;

&lt;p&gt;
Two functions for the layer struct. &lt;code class="src src-cpp"&gt;F&lt;/code&gt; performs forward propagation, taking the input vector and returning the output. Some values are cached for later. &lt;code class="src src-cpp"&gt;B&lt;/code&gt; performs backward propagation, taking the derivative of the output, updating the weights matrix, and returning the derivative of the input. Both are using leaky relu.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[]{&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)};&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500337&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col"&gt;
&lt;p&gt;
Start of main, create a 3 layer network. The network takes 40 values for input, and has two hidden layers with 50 nodes each, and returns single value at the end. The input is based on the x,y coordinate currently predicted, and the output is a single value for whether this pixel should be a space or '#'. At the end we open the training loop, which runs for 500336 iterations, which is a multiple of the output size; 243.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;				 &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;6.14&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col"&gt;
&lt;p&gt;
Generate the input vector &lt;code class="src src-cpp"&gt;x&lt;/code&gt;. Each element of &lt;code class="src src-cpp"&gt;x&lt;/code&gt; is based on the sin of either the x or y coordinate of the pixel currently being predicted.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;			     &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col smol-text-col"&gt;
&lt;p&gt;
Forward propagation
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;		    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x1e\0&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="se"&gt;\0\b\x01\0&lt;/span&gt;&lt;span class="s"&gt;@H&lt;/span&gt;&lt;span class="se"&gt;\374\377&lt;/span&gt;&lt;span class="s"&gt;B&lt;/span&gt;&lt;span class="se"&gt;\x12&lt;/span&gt;&lt;span class="s"&gt;@&lt;/span&gt;&lt;span class="se"&gt;\x18\x12&lt;/span&gt;&lt;span class="s"&gt;G&lt;/span&gt;&lt;span class="se"&gt;\302&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="se"&gt;\x10&lt;/span&gt;&lt;span class="s"&gt;@&lt;/span&gt;&lt;span class="se"&gt;\x12\372\377\221\x10\0\0\200\0\0\0&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="se"&gt;\x02&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col smol-text-col"&gt;
&lt;p&gt;
From the output of the network, &lt;code class="src src-cpp"&gt;y&lt;/code&gt;, calculate \(\frac{dE}{dy}\). We use mean squared error, so the derivative is just \(2(y-\hat{y})\), where \(\hat{y}\) is the target value and is encoded in a string. When written with non-ascii characters this is a lot shorter.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;		     &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col smol-text-col"&gt;
&lt;p&gt;
Back propagation
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-row"&gt;
&lt;div class="code-col"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" .,-*oO##"&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;243&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[9A"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;   --- Oisin Carroll ---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;\&lt;/span&gt;
&lt;span class="s"&gt; gh:Oisincar  web:imois.in"&lt;/span&gt;&lt;span class="p"&gt;);}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="code-col"&gt;
&lt;p&gt;
Output: Choose different chars based on how high/low the value predicted is. Then print special characters if we're at the end of a line (&lt;code class="src src-cpp"&gt;i%27==0&lt;/code&gt;) or we've done a full epoch (&lt;code class="src src-cpp"&gt;i%243==0&lt;/code&gt;). Finally, when we're finished, &lt;code class="src src-cpp"&gt;i==0&lt;/code&gt; and we print the end text.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
On reddit &lt;code&gt;/u/pm_me_P_vs_NP_papers&lt;/code&gt; managed to shorten the code even further - by 50 bytes! Making the final length only 828 bytes and 22 lines. You can read about their optimizations &lt;a href="https://www.reddit.com/r/tinycode/comments/hiscpb/business_card_neural_network/fwkg9i9?utm_source=share&amp;amp;utm_medium=web2x"&gt;HERE!&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Thanks for reading! I'd love to hear suggestions on how to make it shorter, or any other ideas.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>machine-learning</category><category>programming</category><guid>https://imois.in/posts/card-network/</guid><pubDate>Sun, 24 May 2020 22:36:12 GMT</pubDate></item><item><title>Properties of Lights Out: The Game.</title><link>https://imois.in/posts/the-properties-of-lights-out-the-game/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-org44fc9a0" class="outline-2"&gt;
&lt;h2 id="org44fc9a0"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org44fc9a0"&gt;
&lt;p&gt;
This game was sent to me by Lucy Deacon (Link to be added :P), who found it in &lt;a href="https://play.google.com/store/apps/details?id=name.boyle.chris.sgtpuzzles&amp;amp;hl=en_IE"&gt;Simon Tatham's Puzzles&lt;/a&gt;
under the name 'Flip' around August of 2018. For the few months thereafter
we went down the rabbit-hole on how to solve the game, when it's solvable, and
wrote some fast programs and algorithms to check the properties of some very big
boards. This post contains some of the stuff we managed to work out!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org248a5c0" class="outline-2"&gt;
&lt;h2 id="org248a5c0"&gt;The Game&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org248a5c0"&gt;
&lt;script src="https://imois.in/assets/js/TouchUtils.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/lights_out/utils.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/lights_out/LightsCanvas.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/lights_out/LightsOut.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/lights_out/LightsOutState.js"&gt;&lt;/script&gt;&lt;p&gt;
&lt;span class="underline"&gt;Lights Out&lt;/span&gt; is a game released by Tiger
Electronics in 1995. You're given a 5x5 grid of lights, some illuminated and
some not, and your task is to turn them all off. The problem is that toggling
each light also toggles all the surrounding lightsâ¦
&lt;/p&gt;

&lt;p&gt;
Unfortunately, we didn't know the game had a name, much less a Wikipedia
article, until we'd finishedâ¦
&lt;/p&gt;

&lt;p&gt;
I've made a little version of it hereâ¦ The game works equally well (or does
it!!) on different board sizes. Try to turn all 'lights' off.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="lights-out0" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Game 1:&lt;/span&gt; The game of Lights-Out in it's original size: 5x5. Click to flip the blue 'lights'! &lt;/p&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
var g = new LightsOut(document.getElementById('lights-out0'), 5, 5);
g.randomize();
&lt;/script&gt;&lt;p&gt;
The question isâ¦ How can you solve it? Is there a way to look at a position
and instantly know how to solve it or even if can be solved at all?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge6f096b" class="outline-2"&gt;
&lt;h2 id="orge6f096b"&gt;Impossible boards?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge6f096b"&gt;
&lt;p&gt;
First of all, not all boards are solvable. A 2x1 board, for example, will never
let you click on only a single tile. If it starts with just one light on,
there's never a way to turn it offâ¦ However, is the same true for bigger boards?
&lt;/p&gt;
&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="lights-out2x1" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Game 2:&lt;/span&gt; A simple 'parity' case for lights-out. &lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
var g = new LightsOut(document.getElementById('lights-out2x1'), 2, 1, maxwidth=300, parity=true);
g.randomize();
&lt;/script&gt;&lt;p&gt;
All other boards in this page are solvable thoughâ¦ So don't worry :P
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org14e6b52" class="outline-2"&gt;
&lt;h2 id="org14e6b52"&gt;State&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org14e6b52"&gt;
&lt;p&gt;
The first thing to notice is that tapping on the same square twice is the same
as not tapping at all, and also that the order you tap the squares doesn't make
a difference. The solution then will never require pressing any square more than
once - and since we don't care about order, we can store just a yes or no for
whether we need to toggle that square.
&lt;/p&gt;

&lt;p&gt;
Here's the same game board (in blue, below), but also the solution for it; the
red squares are the ones to tap to solve the board.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="lights-out-state0" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;canvas id="lights-out-game0" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Game 3:&lt;/span&gt; The corresponding hidden 'state'/solution (red) for the game board (blue).&lt;/p&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
var g = new LightsOutState(document.getElementById('lights-out-state0'),
                           document.getElementById('lights-out-game0'),
                           5, 5);
g.randomize();
&lt;/script&gt;&lt;p&gt;
If we could work out the corresponding red board for a new unseen blue oneâ¦
We'd be able to solve the game.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org72435f7" class="outline-2"&gt;
&lt;h2 id="org72435f7"&gt;Forward mapping&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org72435f7"&gt;
&lt;p&gt;
It's not too hard to do the reverse: I.e. take the tapped squares (red) and work out the
corresponding board position. There's also only one mapping from this red
'solution' board to the blue 'game' board: A light will be on if and only if
it's surrounded by an odd number of 'taps'.
&lt;/p&gt;

&lt;p&gt;
In fact, it's possible to represent this as matrix multiplication. If the
board is \(m \times n\), we can write the board-state as a single vector \(\vec{b}\) with \(m*n\)
elements. Each element is 1 if the corresponding light is on and 0 otherwise.
The taps on each square - i.e. the solution for that board can be written similarly as
\(\vec{t}\).
&lt;/p&gt;

&lt;p&gt;
\[ \vec{b} = M\vec{t} \pmod 2 \]
&lt;/p&gt;

&lt;p&gt;
We can also consider the whole problem over a binary field - so that all
arithmetic is carried out modulo 2 anyway.
&lt;/p&gt;

&lt;p&gt;
This matrix \(M\) is a kind of strange 'thick' diagonal matrix. For a 3x3 board it
looks like this:
&lt;/p&gt;

&lt;p&gt;
\[
M_{3\times3} = \begin{Bmatrix}
1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 \\
\end{Bmatrix}
\]
&lt;/p&gt;

&lt;p&gt;
In order to find a solution for our board, we can find the inverse of this
matrix (if it exists!) and solve the equation.
&lt;/p&gt;

&lt;p&gt;
\[ \vec{t} = M^{-1}\vec{b} \]
&lt;/p&gt;

&lt;p&gt;
If an inverse exists, then for that board there is exactly one solution
corresponding to every board state - and all board states are solvable.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf890e3e" class="outline-2"&gt;
&lt;h2 id="orgf890e3e"&gt;Unsolvable boards?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf890e3e"&gt;
&lt;p&gt;
If there is an unsolvable configuration of the board, i.e. a board state which
has no taps that leaves all the lights off, then it must exist in the null space
of this matrix. A board is completely solvable iff the matrix has no null space.
&lt;/p&gt;

&lt;p&gt;
Hacking out some very bad row-echelon reduction we could graph the nullity of
these matrices for different size boards, this shows which sizes of board are
always solvable, and which have many configurations that make them unsolvable.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/lights_out/graph20.png" alt="graph20.png" width="500px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;What board sizes are solvable? If a boardsize is solvable completely, it's corresponding square in coloured black. A board which is 'as unsolvable' as it's possible to be is white.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
We can see from this that as expected a \(1\times1\) board is always solvable, but
interestingly a \(4\times 4\) is not. There's also interesting patterns forming
alreadyâ¦ It looks very regular, and there are lines forming for \(11\times n\)
boards too.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org05e7330" class="outline-2"&gt;
&lt;h2 id="org05e7330"&gt;Nullity?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org05e7330"&gt;
&lt;p&gt;
It's interesting to mess around with one of the boards with maximum nullity.
Here's a 4x4 board. It's far easier than others because if there is a solution
at all for a position, then there are many.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="lights-out4x4" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Game 4:&lt;/span&gt; A 4x4 board has the maximum nullity, making it much easier to solve. &lt;/p&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
var g = new LightsOut(document.getElementById('lights-out4x4'), 4, 4);
g.randomize();
&lt;/script&gt;&lt;p&gt;
Similar to a Rubik's cube, where flipping a single piece makes the puzzle
unsolvable, lights-out boards of many dimensions have similar 'parity' cases.
The nullity of the mapping matrix effectively counts these. For a \(4\times 4\)
board, which has a nullity of 4, there are 4 pieces which are fully determined
by the remaining 12. Also, for every solvable board, there are \(2^4 -1\)
unsolvable ones.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org033e24d" class="outline-2"&gt;
&lt;h2 id="org033e24d"&gt;'Cascading'&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org033e24d"&gt;
&lt;p&gt;
One (human) way of trying to solve a lights-out puzzle is to always try to
click under any light. If you go through the board row-by-row downwards,
and always click below any 'on' lights, you can take any game state and 'cascade'
all remaining lights into the bottom row.
&lt;/p&gt;

&lt;p&gt;
At this point, you can click a few times in the top row, and repeat the process.
&lt;/p&gt;

&lt;p&gt;
Clicking just
one square in the top row and cascading it to the bottom will cause some of the
squares in the bottom row to flip. This means that each square in the top row corresponds (after
cascade) to some subset of the bottom row being flipped. If we work out what
these correspondences are, we have another way of solving the board.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="lights-out-cascade" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Game 5:&lt;/span&gt; An animation of cascading. Pick a random square in the top row, then 'cascade' it downwards. Eventually, this will solve the board!&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
var g = new LightsOut(document.getElementById('lights-out-cascade'), 4, 6);

function setupCascade(g, delay) {
    // Add timer to perform cascade...
    window.setInterval(function(){
        // Find highest point under
        var found = false;
        var j = 1, i = 0;
        for (j; j &lt; g.squaresY; j++) {
            for (i=0; i &lt; g.squaresX; i++) {
                // If there's a square above it, we've found where to click.
                if (g.squares[i + (j-1)*g.squaresX] == 1) {
                    found = true;
                    break;
                }
            }
            if (found) break;
        }

        // If we haven't found one, just click anywhere in the top row.
        if (!found) {
            j = 0;
            i = Math.floor(Math.random() * g.squaresX);
        }

        // Click that square
        g.click(i,j);
    }, delay); // 1000ms = 1 sec
}

setupCascade(g, 1000);
&lt;/script&gt;&lt;p&gt;
Since it's possible to always reduce any board (via cascade) to having lights
only in the bottom row, another way to ask if a boardsize is solvable if it's
possible to reach &lt;span class="underline"&gt;any&lt;/span&gt; bottom row configuration by click/cascading. This is
true because cascades commute.
&lt;/p&gt;

&lt;p&gt;
If we construct a matrix from the resulting bottom rows of all possible
click-a-square/cascade ops, it will span all solvable bottom rows.
Then, the boardsize will always be solvable iff that matrix has a nullity of 0.
&lt;/p&gt;

&lt;p&gt;
This is far more efficient than our previous method. Since we can equally
perform cascading left-to-right as well as downwards the matrices we need to
check are only
\(min(m,n)\times min(m,n)\) rather than \(mn \times mn\) as before.
&lt;/p&gt;

&lt;p&gt;
It's interesting that a 4x4 board is always solvable in one try via cascading,
since it's nullity spans the entire bottom row.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="lights-out-cascade-big" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Game 6:&lt;/span&gt; For fun, here's a very large game cascading. Note the patterns left in the last row. We're interested if it's possible to construct any pattern here by click/cascading any number of times. &lt;/p&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
var h = new LightsOut(document.getElementById('lights-out-cascade-big'), 20, 20, maxwidth=450);
setupCascade(h, 100);
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc128e8b" class="outline-2"&gt;
&lt;h2 id="orgc128e8b"&gt;Maximum nullity&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc128e8b"&gt;
&lt;p&gt;
An interesting result from this is there is a maximum nullity for any board.
&lt;/p&gt;

&lt;p&gt;
Namely, since we can cascade any board into a single row, the nullity
of the mapping between solution and boardstate cannot be larger than \(m\). Also,
we can equally perform the cascade left-to-right, giving an upper bound of \(min(m,n)\).
&lt;/p&gt;

&lt;p&gt;
This can also be proven by looking at the structure of our original mapping matrix \(M\).
&lt;/p&gt;

&lt;p&gt;
\[
M_{3\times3} = \begin{Bmatrix}
1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\
{ \color{red}1 } &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; { \color{red}1 } &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; { \color{red}1 } &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; { \color{red}1 } &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; { \color{red}1 } &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1 \\
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; { \color{red}1 } &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 \\
\end{Bmatrix}
\]
&lt;/p&gt;

&lt;p&gt;
This diagonal (shown in red) will always run from \((0,m)\) to \((n*(m-1), mn)\),
and can be used to construct the first \(n*(m-1)\) columns of a matrix in row-echelon
form. The maximum nullity of this matrix therefore is \(n\). Similarly to before,
the board can be rotated prior to constructing the matrix, and so the maximum
nullity is \(min(m,n)\).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1d6cf4a" class="outline-2"&gt;
&lt;h2 id="org1d6cf4a"&gt;Bitops&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1d6cf4a"&gt;
&lt;p&gt;
In order to speed up calculating large boards, we wrote some Very Fast&lt;sup&gt;tm&lt;/sup&gt; c++
matrix code, to perform all binary field arithmetic in parallel with bitops.
The vectors, as well as matrix rows are encoded as several unsigned
integers, each storing 32 binary values. Multiplication can then simply be performed
using xor. Similarly row-echelon reduction and calculation of the rank/nullity
of each matrix can be done extremely quickly.
&lt;/p&gt;

&lt;p&gt;
The cascade operation can also be treated with bit-ops. We take
the current highest non-zero row. This is the row we need to 'click under', so
to speak, and denote it as the top row. We take the row below it (the middle row) and xor
it in-place with the top row. This forms the center of the cross.
&lt;/p&gt;

&lt;p&gt;
Next, we can xor the middle row once again with the top row bitshifted once
left, and once right (being careful to handle overlaps), forming the left/right
arms of the cross. We can then xor the row further below (the bottom
row) in-place with the top row, forming the base of the cross. Finally the top
row can be set to 0s, which is effectively the top of the cross.
&lt;/p&gt;

&lt;p&gt;
This allows us to perform up to 32 'clicks' at once, in very few bit operations.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org20d2aa3" class="outline-2"&gt;
&lt;h2 id="org20d2aa3"&gt;Low memory cascade&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org20d2aa3"&gt;
&lt;p&gt;
Although this cascade is fast, it requires a lot of memory. In order to generate
the matrix for, e.g. a \(4000 \times 4000\) board, it requires 4000 boards, or the
same board to be used 4000 times. This is getting very large!
&lt;/p&gt;

&lt;p&gt;
If we consider click-cascading only on an empty board, we only ever have 3 rows with
non-zero entries at a time. We can perform the operation only with 3 rows,
shuffling them around on each iteration.
&lt;/p&gt;

&lt;p&gt;
We can do better though. With the bottom row starting empty, it really just
becomes set equal to the top row. This means we can store just 2 rows, and
treat them as top/middle. We can perform each cascade iteration with 3 xors and
two bitshifts for up to 32 clicks. It's also close in memory which should reduce
cache misses.
&lt;/p&gt;

&lt;p&gt;
All in all, this sped up our program by from taking almost
20 hours to calculate all boards up to \(512\times 512\) to just 12 seconds. It's
6000 times faster, without parallelization. The speedup is even more significant
vs the pre-cascading programs and our initial python/numpy code too.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org13680eb" class="outline-2"&gt;
&lt;h2 id="org13680eb"&gt;Lots of boards&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org13680eb"&gt;
&lt;p&gt;
In order to calculate nullity for a few million boardsâ¦ We could compute
the matrices for all boards of a certain width simultaneously. Cascade once,
grab the new bottom row for each board, copy it into a matrix, reduce it in-place
and calculate nullity, and discard it. We can then iterate to calculate the
nullity of a board that is \((m+1)\times n\). To parallelize, each core just takes a
width of board and calculates the nullity of all boards of that width up to a
maximum. This took a few days to run on a HPC cluster, even with all of our
optimizations.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga067fe0" class="outline-2"&gt;
&lt;h2 id="orga067fe0"&gt;Results!!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga067fe0"&gt;
&lt;p&gt;
The resulting images for different sizes.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/lights_out/graph128.png" alt="graph128.png" width="500px"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/lights_out/graph512.png" alt="graph512.png" width="500px"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/lights_out/graph4096.png" alt="graph4096.png" width="500px"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Here we can see the patterns that continue even for very large boards. In the
512x512 image, there's a faint grid forming at near powers of 2: 127 and 255.
Above it, there's a similar line around 63. The largest size: 4096 requires
zooming for the 'constellations' to be even visible, but they're there, with
several big spots also scattered around.
&lt;/p&gt;

&lt;p&gt;
It's interesting that, as you move further 'out', the boards are relatively more
solvable. The intuition is that, for a board to have a very high nullity, many
it's click/cascade vectors must align. This becomes increasingly more unlikely to
happen as these vectors increase in size and number.
&lt;/p&gt;

&lt;p&gt;
There're very few large boards which loose all dimensions. These are the only
ones larger than 1024*1024 (not including rotations).
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;colgroup&gt;
&lt;col class="org-right"&gt;
&lt;col class="org-right"&gt;
&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;height&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;width&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;percentage nullity&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1023&lt;/td&gt;
&lt;td class="org-right"&gt;1535&lt;/td&gt;
&lt;td class="org-right"&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1023&lt;/td&gt;
&lt;td class="org-right"&gt;3071&lt;/td&gt;
&lt;td class="org-right"&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1279&lt;/td&gt;
&lt;td class="org-right"&gt;3839&lt;/td&gt;
&lt;td class="org-right"&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1791&lt;/td&gt;
&lt;td class="org-right"&gt;2303&lt;/td&gt;
&lt;td class="org-right"&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;2047&lt;/td&gt;
&lt;td class="org-right"&gt;3071&lt;/td&gt;
&lt;td class="org-right"&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1407&lt;/td&gt;
&lt;td class="org-right"&gt;3967&lt;/td&gt;
&lt;td class="org-right"&gt;0.9097370291400142&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1535&lt;/td&gt;
&lt;td class="org-right"&gt;3071&lt;/td&gt;
&lt;td class="org-right"&gt;0.9993485342019544&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
These are all surprisingly structured! Often near 2&lt;sup&gt;n&lt;/sup&gt;-1 or 3*2&lt;sup&gt;n&lt;/sup&gt;-1 (i.e. 3071).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org05ee386" class="outline-2"&gt;
&lt;h2 id="org05ee386"&gt;Otherâ¦&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org05ee386"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6e456db" class="outline-3"&gt;
&lt;h3 id="org6e456db"&gt;Looping patterns?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6e456db"&gt;
&lt;p&gt;
Since a cascade operation can be written as a matrix multiplication (if the
board has width \(m\), the resulting cascade matrix is \(2m\times 2m\)), we can
consider powers of it instead of repeatedly cascading.
&lt;/p&gt;

&lt;p&gt;
The question becomes, what power of this matrix results in the identity matrix
(or the same cascade matrix again)? This would mean the nullity of boards of a
certain width would form a long repeating pattern based on their height.
&lt;/p&gt;

&lt;p&gt;
The period of small cascade matrices; less than 40, are all about/below 8000-16000,
but it blows up from thereâ¦ The period of the cascade over a board of width 40
is over one million iterations.
&lt;/p&gt;

&lt;p&gt;
Funnily, we both came up with this idea coincidentally within a few minutes of each other.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4ae109c" class="outline-3"&gt;
&lt;h3 id="org4ae109c"&gt;Sequences&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4ae109c"&gt;
&lt;p&gt;
Some board widths are surprisingly solvable/ unsolvable. We found boards of size
(\(10 \times 31n-1\)) are all unsolvable (nullity of 10) to as high as we could
calculate at the time.
&lt;/p&gt;

&lt;p&gt;
Several other widths are surprisingly solvable, 10 (other than above), 81, and many more.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4a68718" class="outline-3"&gt;
&lt;h3 id="org4a68718"&gt;OEIS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4a68718"&gt;
&lt;p&gt;
The Online Encyclopedia of Integer Sequences is a searchable database
containing, well, integer sequences. After finishing up, we tried searching it
for our sequence. It turns out square boards have their own entry &lt;a href="https://oeis.org/A093614"&gt;here!&lt;/a&gt; This was
the first time we knew the game by it's proper name, and found the game's
relation to other areas of cellular automata.
&lt;/p&gt;

&lt;p&gt;
We'd generated almost twice as far as the furthest though! The highest term in
the OEIS sequence is 2363, while ours is ~4100.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1cd3300" class="outline-2"&gt;
&lt;h2 id="org1cd3300"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1cd3300"&gt;
&lt;p&gt;
I think we both agree we haven't completely figured out as much as we'd likeâ¦
The patterns are still somewhat a mystery, even if we've found some logic in
them! It's one to revisit for sure :P.
&lt;/p&gt;

&lt;p&gt;
As always, feel free to dig through the source code for this page either here or
on &lt;a href="https://github.com/oisincar/imois.in/tree/master/assets/js/lights_out"&gt;my Github for the site&lt;/a&gt;! It's written in pure javascript/html canvas (apart from the english,
that's written in englishâ¦).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>gamedev</category><category>math</category><category>programming</category><guid>https://imois.in/posts/the-properties-of-lights-out-the-game/</guid><pubDate>Thu, 19 Dec 2019 16:59:29 GMT</pubDate></item><item><title>Procedural Animation 3: Gradient Descent</title><link>https://imois.in/posts/procedural-animation-3-gradient-descent/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-org80ca98f" class="outline-2"&gt;
&lt;h2 id="org80ca98f"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org80ca98f"&gt;
&lt;script type="text/javascript" src="https://unpkg.com/vis-graph3d@latest/dist/vis-graph3d.min.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/TouchUtils.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Global.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Arm.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/ArmCanvas.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Graph.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/GradientDescent2Link.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/TwoLinkArmAndGraph.js"&gt;&lt;/script&gt;&lt;p&gt;
In this third and final section, we'll cover how to solve harder problems that don't
necessarily have a single solution, or ones that have solutions that can't be
written as an equation of known variables.
&lt;/p&gt;

&lt;p&gt;
If you haven't read &lt;a href="https://imois.in/posts/procedural-animation-1-state-machines/"&gt;Part 1&lt;/a&gt;, we covered some simple state machines and some
general ideas on how I try to approach these kind of problems.
&lt;/p&gt;

&lt;p&gt;
You might also want to check out &lt;a href="https://imois.in/posts/procedural-animation-2-functions"&gt;Part 2&lt;/a&gt;, where we went over how to build up more
complex movement by combining functions of state.
&lt;/p&gt;

&lt;p&gt;
And finally, all of the (interactive!) animations here are running in javascript canvas, so you can open the
source code in the inspector or find it on &lt;a href="https://github.com/oisincar/imois.in/tree/src/files/assets/js/procedural_animation"&gt;my github for the site!&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0c63f40" class="outline-2"&gt;
&lt;h2 id="org0c63f40"&gt;What we'll make!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0c63f40"&gt;
&lt;p&gt;
These tenticles/ arms/ vines might make a fun enemy or background in a game, but
also demonstrate an idea that can be used to solve all kinds of problems! The
same idea (gradient descent) is the backbone of a huge amount of modern AI -
used to improve Google's results, autonomous cars, and moreâ¦ And all you
need to understand it is a basic knowledge of derivatives.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="intro-demo-arms" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; Reaching arms with 20 and 100 segments. Click &amp;amp; Drag to move the ball!&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
class GradientDescentLongChain {

    constructor(id) {
        var self = this;

        var armC = new ArmCanvas(
            document.getElementById(id),
            function(){self.finished = false;});

        this.arm = new Arm(20, 300, -250);
        this.arm2 = new Arm(100, 100, -50);

        armC.addArm(this.arm);
        armC.addArm(this.arm2);

        // Double arm length
        this.arm._lengths = this.arm._lengths.map(function(x) { return x*1.7; });
        this.arm2._angles = this.arm2._angles.map(function(x) { return 0; });

        var doUpdate = true;
        if (doUpdate)
            setInterval(function() { self.update(); }, self.interval);
    }

    improve(arm) {
        // var grads = this.arm.calculateCurrentGradients();
        var grads = arm.calculateCurrentGradientsSq();

        // Update arm angles!
        for (var i = 0; i &lt; grads.length; i++) {
            arm.changeAngle(i, -grads[i]*0.00001);
        }

        // If we're now close enough, don't update til we have to again.
        if (arm.getCurrentError() &lt; 0.05) {
            return true;
        }
        return false;
    }

    update() {
        // Only do stuff if we're not already at the target.
        if (!this.finished) {
            // Finished if both arms are finished
            var a1 = this.improve(this.arm);
            var a2 = this.improve(this.arm2);
            this.finished = a1 &amp;&amp; a2;
        }
    }
}

var b = new GradientDescentLongChain('intro-demo-arms');
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb5a9ae1" class="outline-2"&gt;
&lt;h2 id="orgb5a9ae1"&gt;The problem: Kinematics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb5a9ae1"&gt;
&lt;p&gt;
Generally, (and according to google) kinematics is a branch of mechanics that
deals with the features or properties of the motion of an object. It's often
refered to as the "Geometry of Motion". For charachter animation, we usually
deal with Kinematics of Simple Chains - or limbsâ¦
&lt;/p&gt;

&lt;p&gt;
For a given arm, &lt;b&gt;Forward Kinematics&lt;/b&gt; is working out where the hand (or end) is
in space given the angles between the shoulder, and upper and lower arms. The
opposite of this, called &lt;b&gt;Inverse Kinematics&lt;/b&gt; (IK), is where you have a fixed
target point and instead want to choose the same angles so the hand is as close
to it as possible.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;b&gt;Forward Kinematics:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;Your upper arm is at \(\alpha\) to your torso, and your
upper arm is \(\beta\) to your lower arm, where is your hand?&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Inverse Kinematics:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;You want to reach for a ball infront of you, what
angles should you have at your shoulder and elbow?&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
We're going to look at the second one. Inverse Kinematics are used for all kinds
of charachter animation, robotics, and predicting people's location in VR. It'd
be pretty useful to have a way to solve it!
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;span class="align_all"&gt;
        &lt;div&gt;
            &lt;!-- Arm --&gt;
            &lt;canvas id="twolinkarmandgraph_smp" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
                Your browser doesn't support html5 canvas :c.
            &lt;/canvas&gt;&lt;!-- Sliders --&gt;&lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Shoulder Angle (Î±)&lt;/span&gt;
                &lt;span id="ang1_smp" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang1val_smp" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Elbow Angle (Î²)&lt;/span&gt;
                &lt;span id="ang2_smp" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang2val_smp" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/span&gt;
    &lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; The problem: Trying to reach for the ball by changing the angles of both joints. How can we find these angles?&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
{
    function UpdateGraph() {}
    // Create an arm in that space
    var armC = new ArmCanvas(document.getElementById('twolinkarmandgraph_smp'), UpdateGraph);
    armC.targetX = 27;
    armC.targetY = 13;

    var arm = new Arm(2);
    armC.addArm(arm);

    this.arm = arm;

    // slider
    $("#ang1_smp").slider({
        min: 0,
        max: 180,
        values: [arm.getAngle(0)],
        slide: function(event, ui) {
            $("#ang1val_smp").text(ui.values[0] + "Â°")
            arm.setAngle(0, ui.values[0]);
        },
    });
    $("#ang1val_smp").text(arm.getAngle(0) + "Â°");

    $("#ang2_smp").slider({
        min: -160,
        max: 160,
        values: [arm.getAngle(1)],
        slide: function(event, ui) {
            $("#ang2val_smp").text(ui.values[0] + "Â°");
            arm.setAngle(1, ui.values[0]);
        }
    });
    $("#ang2val_smp").text(arm.getAngle(1) + "Â°");
}
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcadac41" class="outline-2"&gt;
&lt;h2 id="orgcadac41"&gt;Simple arms in 2d&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcadac41"&gt;
&lt;p&gt;
For the 2D case, and when there are only two joints in the arm, there are (usually) two solutions - an
'elbows up' position, and an 'elbows down' one.
&lt;/p&gt;

&lt;p&gt;
Of course, there are cases where there are no solution. If the ball is out of
reach, for example.
&lt;/p&gt;

&lt;p&gt;
It's possible to work out these two angles with coordinate geometry or a bit of
trig, as long as you have the lengths of both arm segments and the target
location. However, as there's a million other gamedev sites, robotics courses,
and random medium posts, so I'll won't explain it here again. It is a fun problem
though - I'd recommend giving it a go!
&lt;/p&gt;

&lt;p&gt;
It's also worth noting problems and limbs in 3D can be solved using the same 2D algorithm/equation
with one trick: An 'elbow target'. We add a point that, given the choice, the
elbow will be as near to as possible. This (interestingly) causes all 5 points: Shoulder, Elbow,
Hand, Hand Target, and Elbow Target to all lie in the same plane. We can take
the plane defined by the fixed points: Shoulder, Hand Target, and Elbow Target
and solve the problem in 2d on that plane. This is how a lot of kinematics in
games is done.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgafa998e" class="outline-2"&gt;
&lt;h2 id="orgafa998e"&gt;Harder problems.. I.e. Arms with more joints..?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgafa998e"&gt;
&lt;p&gt;
It's not possible to solve harder problems using the same idea however, if you
add an extra segment to the arm there suddenly isn't a way to find solutions
(mostly because there are now likely infinite solutionsâ¦).
&lt;/p&gt;

&lt;p&gt;
This is what I wanted to write aboutâ¦ How can you find approximate or fast
solutions to a problem that's much harder to solve exactly, or find 'organic'
solutions to some problem that has a lot of possible solutions.
&lt;/p&gt;

&lt;p&gt;
Instead of trying to find a solution instantly, we take the current position of
the arm and figure out how to improve it slightly. The solution is then
calculated itteratively, looping over and over either until we're not getting
any closer or we're within some distance.
&lt;/p&gt;

&lt;p&gt;
Because we're only 3 dimensional creaturesâ¦ The solution is easiest to
describe for arms with 2 jointsâ¦ But the maths works for any number of joints.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb2d23a4" class="outline-2"&gt;
&lt;h2 id="orgb2d23a4"&gt;Forward Kinematics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb2d23a4"&gt;
&lt;p&gt;
First, we need to work out where the end of our arm isâ¦ We write the angle at
the shouder as \(\alpha\), and at the elbow as \(\beta\). The length of the upper
arm is \(l1\), and forearm is \(l2\). I take the shoulder to be at \((0,0)\)
&lt;/p&gt;

&lt;p&gt;
To do this, we can split it into 2 parts. The position of the elbow will be at:
&lt;/p&gt;

\begin{align*}
Elbow_x &amp;amp; = l1 * sin(\alpha) \\
Elbow_y &amp;amp; = l1 * cos(\alpha)
\end{align*}

&lt;p&gt;
Then, similarly, we can work out the position of the hand relative to the elbow.
This is a little harder to see, but we can take the angle of the arm relative to
the ground (\(\alpha + \beta\)) and use the same trig formula.
&lt;/p&gt;

\begin{align*}
Hand_x - Elbow_x &amp;amp; = l2 * sin(\alpha + \beta) \\
Hand_y - Elbow_y &amp;amp; = l2 * cos(\alpha + \beta)
\end{align*}

&lt;p&gt;
Then the position of the hand is simply the sum.
&lt;/p&gt;

\begin{align*}
Hand_x &amp;amp; = l1 * sin(\alpha) + l2 * sin(\beta - \alpha) \\
Hand_y &amp;amp; = l1 * cos(\alpha) + l2 * cos(\beta - \alpha)
\end{align*}
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0cea22f" class="outline-2"&gt;
&lt;h2 id="org0cea22f"&gt;Distance function&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0cea22f"&gt;
&lt;p&gt;
In order to perform gradient descent, we need a formula for the error we're
trying to reduce. This is the distance from our hand to our target. Ideally, we
want this distance to be 0, which'd mean our hand is exactly on the target.
&lt;/p&gt;

&lt;p&gt;
The distance in x and y can be written from the above. Here \(|x|\) means the
absolute value of x, or the non-negative value of x.
&lt;/p&gt;

\begin{align*}
Dist_x &amp;amp; = | Target_x - (l1 * sin(\alpha) + l2 * sin(\alpha + \beta)) | \\
Dist_y &amp;amp; = | Target_y - (l1 * cos(\alpha) + l2 * cos(\alpha + \beta)) |
\end{align*}

&lt;p&gt;
Then using pythagoras the distance is:
&lt;/p&gt;

\begin{align*}
Dist = \sqrt{Dist_x^2 - Dist_y^2}
\end{align*}

&lt;p&gt;
We can look at this distance for any value of \(\alpha\) and \(\beta\). If we plot
\(\alpha\) and \(\beta\) on the x and y coordinates of a graph, and the
corrisponding distance the arm is from the target the z (vertical) axis, we can
view the distance as a shape.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;span class="align_all"&gt;
        &lt;div&gt;
            &lt;!-- Arm --&gt;
            &lt;canvas id="twolinkarmandgraph" class="light_border" width="600" height="300" style="max-width: 85vw;"&gt;
                Your browser doesn't support html5 canvas :c.
            &lt;/canvas&gt;&lt;!-- Sliders --&gt;&lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Shoulder Angle (Î±)&lt;/span&gt;
                &lt;span id="ang1" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang1val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Elbow Angle (Î²)&lt;/span&gt;
                &lt;span id="ang2" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang2val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Upper Arm Len&lt;/span&gt;
                &lt;span id="l1" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="l1val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Forearm Len&lt;/span&gt;
                &lt;span id="l2" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="l2val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

        &lt;/div&gt;
        &lt;div id="mygraph" style="max-width: 85vw;"&gt;&lt;/div&gt;
    &lt;/span&gt;
    &lt;script&gt; var a = new TwoLinkArmAndGraph(); &lt;/script&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 2:&lt;/span&gt; The distance function for any of the shoulder and elbow angles.
    On the graph: Click to pan, scroll wheel to zoom, and mouse over to see the distance/angles at any point. Try messing around
    with the angles and arm lengths, or move the target ball!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Each point on the surface corrisponds to some shoulder and elbow angles, and the
height (or colour) there corrisponds to the distance those angles put the hand
from the target. As you change the angles of the arms, you can see the graph
translate - the center of it shows the current elbow and shoulder angles.
&lt;/p&gt;

&lt;p&gt;
Try tweaking lengths, then read the lowest/highest point from the graphâ¦ Then change
the arm's angles to those and see what it looks like.
&lt;/p&gt;

&lt;p&gt;
There's often two low points in the graph - which corrispond to the two best
 solutions. Moving the ball far away gives only one low point - meaning there's
 only one best solution; when the arm is pointing towards it.
 There's also usually one worst solution (the reddest/ highest point), which
 is where the arm is pointing away from the ball.
&lt;/p&gt;

&lt;p&gt;
Our goal will be effectively to try and find the lowest point on this surface -
the angles there will bring our arm closest to our target ball.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org949f63f" class="outline-2"&gt;
&lt;h2 id="org949f63f"&gt;Gradient Descent&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org949f63f"&gt;
&lt;p&gt;
We can use the derivitive of this distance function to improve our errors.
First, write the distance corrisponding to \(\alpha\) and \(\beta\) as \(Dist(\alpha, \beta)\).
&lt;/p&gt;

&lt;p&gt;
Then we can consider the partial derivitive with respect to the angles.
&lt;/p&gt;

\begin{align*}
\frac{\partial Dist}{\partial \alpha}
\end{align*}

&lt;p&gt;
This works out to a single value, and can be read/ thought of as 'how does the
distance to the target change when I change \(\alpha\) by a very small amount'.
&lt;/p&gt;

&lt;p&gt;
For example if \(\frac{\partial Dist}{\partial \alpha}\) is positive, then
increasing \(\alpha\) will bring increase the distance. Decreasing \(\alpha\) then brings
hand towards the target. If the derivitive is negative, we
should instead increase \(\alpha\) by a small amount to improve our hand position.
This can be written as:
&lt;/p&gt;

\begin{align*}
\alpha := \alpha - k * \frac{\partial Dist}{\partial \alpha}
\end{align*}

&lt;p&gt;
Here k is a small value, in the animations I have it set to 0.0001. This means
each update loop we update alpha to move the hand a little closer.
&lt;/p&gt;

&lt;p&gt;
The maths is exactly the same for the elbow position:
&lt;/p&gt;

\begin{align*}
\beta := \beta - k* \frac{\partial Dist}{\partial \beta}
\end{align*}

&lt;p&gt;
And for any number of limbs.
&lt;/p&gt;

&lt;p&gt;
This method of improving is called 'gradient descent', because if we look at the
surface, each time we update we travel down the surface until we reach the bottom.
&lt;/p&gt;

&lt;p&gt;
The demos just perform this update once per frame, but it's easy to completely
solve the system by running for more itterations.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgde017df" class="outline-2"&gt;
&lt;h2 id="orgde017df"&gt;Implementation &amp;amp; Extras&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgde017df"&gt;
&lt;p&gt;
It might help to look through the source code for the animations (embedded into
this page), or available &lt;a href="https://github.com/oisincar/imois.in/blob/master/assets/js/procedural_animation/Arm.js"&gt;here on Github&lt;/a&gt;. You're free to lift this for anything,
the code's CC0!
&lt;/p&gt;

&lt;p&gt;
Here's a bonus of what happens when you accidentally make 3 arms compete for who
renders at the same timeâ¦
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="twolinkgrad_arm_canvas_broken" class="light_border" width="500" height="400" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;script&gt;
      new GradientDescent2Link('twolinkgrad_arm_canvas_broken', 2);
      new GradientDescent2Link('twolinkgrad_arm_canvas_broken', 4);
      new GradientDescent2Link('twolinkgrad_arm_canvas_broken', 15);
    &lt;/script&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 3:&lt;/span&gt; Glitchy movement, could be a neat effect for a Stranger Things monster..?&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Anyway, I hope this helped! Gradient descent is a very powerful tool for solving
any kind of problem if you're able to express it in a certain way. For more
procedural animation stuff, you might be interested in &lt;a href="https://imois.in/posts/procedural-animation-1-state-machines/"&gt;Part 1&lt;/a&gt; where I looked at
some core ideas and a light animation, or &lt;a href="https://imois.in/posts/procedural-animation-2-functions"&gt;Part 2&lt;/a&gt; with some more fancy function
ideas and shapes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>animation</category><category>gamedev</category><category>math</category><category>programming</category><guid>https://imois.in/posts/procedural-animation-3-gradient-descent/</guid><pubDate>Tue, 26 Nov 2019 00:22:20 GMT</pubDate></item><item><title>Jack Boyce's Siteswap Questions</title><link>https://imois.in/posts/jack-boyces-siteswap-questions/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-org292b8b4" class="outline-2"&gt;
&lt;h2 id="org292b8b4"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org292b8b4"&gt;
&lt;p&gt;
At EJC last year (2018), I came across Jack Boyce's siteswap questions, which
can be found &lt;a href="http://www.juggling.org/help/siteswap/tests/test-boyce.html"&gt;HERE!&lt;/a&gt; I'd highly recommend giving them a go. They start off doable,
and at the end work up to a derivation of how many siteswaps of a given length
there are.
&lt;/p&gt;

&lt;p&gt;
I ended up getting a bit carried away, and writing some programs to visualize
parts of the questions, and take some ideas further. The full source for generating
the graphs can be found &lt;a href="https://github.com/oisincar/siteswap_graph"&gt;on my Github.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
I wrote almost all of this at the time, but I'm only getting around to cleaning
it up and posting it nowâ¦ 9 months later.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf7ccd81" class="outline-2"&gt;
&lt;h2 id="orgf7ccd81"&gt;q1&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf7ccd81"&gt;
&lt;p&gt;
&lt;i&gt;I am juggling \(868671\) with clubs (yeah, right).  How many do I have?&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
The number of objects in a given siteswap is just the average value, I.e. The
sum of the numbers divided by the length.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Answer: 6
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org5d90bd3" class="outline-2"&gt;
&lt;h2 id="org5d90bd3"&gt;q2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5d90bd3"&gt;
&lt;p&gt;
&lt;i&gt;I have a bowling ball that I can only throw as a site swap '\(3\)' throw. Which&lt;/i&gt;
&lt;i&gt;of the following patterns can I theoretically run, using the bowling ball in addition to 3 normal balls:&lt;/i&gt;
&lt;/p&gt;
&lt;div class="org-center"&gt;
&lt;p&gt;
&lt;i&gt;a) \(53\)     b) \(6631\)    c) \(633\)    d) \(577131\)&lt;/i&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
This is a question about orbits. A siteswap throw is thrown it's value number of
beats later (e.g. a \(6\) is thrown 6 beats later). Therefore we're looking for
siteswaps which have a \(3\) every 3 beats (wrapping).
&lt;/p&gt;

&lt;p&gt;
This is only c).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge19e04d" class="outline-2"&gt;
&lt;h2 id="orge19e04d"&gt;q3&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge19e04d"&gt;
&lt;p&gt;
&lt;i&gt;You are doing a 4 ball fountain and decide you want to switch into&lt;/i&gt;
&lt;i&gt;741, an excited state site swap.  You can't just start throwing:&lt;/i&gt;
&lt;i&gt;4444741741â¦ Since the last fountain throw (4) will collide with the&lt;/i&gt;
&lt;i&gt;first 1 you do.  Some connecting throws are needed.  What is the&lt;/i&gt;
&lt;i&gt;shortest starting sequence for 741?&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
A 4 ball base fountain occurs in the base state of 4 balls, which can be written
as:
&lt;/p&gt;

&lt;pre class="example"&gt;
4|xxxx
&lt;/pre&gt;

&lt;p&gt;
741 occurs in state:
&lt;/p&gt;
&lt;pre class="example"&gt;
7|xx_x__x
4|x_xx_x
1|xxx_x
&lt;/pre&gt;

&lt;p&gt;
Before the 7 is thrown, we're in state &lt;code&gt;xxx_x&lt;/code&gt;, which is simply a \(5\)
away from the base state.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgee70d8d" class="outline-2"&gt;
&lt;h2 id="orgee70d8d"&gt;q4&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgee70d8d"&gt;
&lt;p&gt;
&lt;i&gt;You want to get back into the fountain, from 741.  What is the&lt;/i&gt;
&lt;i&gt;shortest connecting (ending) sequence in this direction?&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
From &lt;code&gt;xxx_x_&lt;/code&gt; to &lt;code&gt;xxxx___&lt;/code&gt;, we can throw a \(3\).
&lt;/p&gt;

&lt;p&gt;
It's not a coincidence that the the transition into \(741\) (\(5\)) and out (\(3\))
together make a valid siteswap (\(53\)). The intuition here is that you can
transition into any siteswap, repeat that siteswap any number of times, and
transition back. That includes repeating it 0 times. Therefore the transition
into and out of any siteswap must be, itself, a valid (ground state) pattern.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org86053f8" class="outline-2"&gt;
&lt;h2 id="org86053f8"&gt;q5&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org86053f8"&gt;
&lt;p&gt;
&lt;i&gt;Go from the 4 ball fountain to 714.  What are the shortest&lt;/i&gt;
&lt;i&gt;connecting sequences (both directions)?&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
As before we can work out the state that 714 starts in.
&lt;/p&gt;


&lt;pre class="example"&gt;
7|x_xx__x
1|xxx__x
4|xx_xx
&lt;/pre&gt;


&lt;p&gt;
Before the 7 is thrown, we're in state \(xx\_xx\). This is where we need our
transition to leave us. We can see it won't be possible to transition in a
single throw, so lets look at transitions of length 2.
&lt;/p&gt;

&lt;p&gt;
I.e. finding the throws a, b here:
&lt;/p&gt;
&lt;pre class="example"&gt;
4|xxxx
a|
b|xx_xx
&lt;/pre&gt;
&lt;p&gt;
For a and b, (and therefore the transition into the pattern) both \(55\) and \(64\) work.
&lt;/p&gt;

&lt;p&gt;
As for the transition back, a \(2\) works. Without having to check, we know this
will work because \(552\) and \(642\) are valid siteswaps.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org7fdc9db" class="outline-2"&gt;
&lt;h2 id="org7fdc9db"&gt;q6&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7fdc9db"&gt;
&lt;p&gt;
&lt;i&gt;You are already doing \(741\) and want to switch directly into \(714\).&lt;/i&gt;
&lt;i&gt;What is the shortest sequence for doing so?  [You could just&lt;/i&gt;
&lt;i&gt;concatenate the ending sequence found in (4) above and the starting&lt;/i&gt;
&lt;i&gt;sequence in (5), but this is not the shortest solution.]&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
Here, we're looking for the transition from \(xxx\_x\) to \(xx\_xx\). This is just a
\(5\).
&lt;/p&gt;

&lt;p&gt;
We can also see this by looking at the transitions we found into the siteswap.
For \(741\) we found \(5\), and for \(714\) we found \(55\). The difference here is just
an extra \(5\).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb267dae" class="outline-2"&gt;
&lt;h2 id="orgb267dae"&gt;q7&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb267dae"&gt;
&lt;p&gt;
&lt;i&gt;Is the trick \(66671777161\) simple?  If not, which portion of the&lt;/i&gt;
&lt;i&gt;pattern can be repeated within the larger trick?&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Is the trick \(6316131\) simple?  If not, which portion can be repeated?&lt;/i&gt;
&lt;/p&gt;


&lt;p&gt;
Here 'simple' (more commonly 'prime') refers to simple cycles in graph theory.
These are siteswaps where each state is only visited once. We could find answers
by working out all the states in each siteswaps, and look for duplicates. If
there's any duplicate, then the siteswap isn't simple, and the throws between
these duplicated states can be repeated. This can be done by brute force as
follows by generating the table by hand. I'm too lazy to do this so I'll write a
much longer program to do it insteadâ¦ :thinking:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Function mapping from current state to next state.&lt;/span&gt;
&lt;span class="c1"&gt;-- E.g. throw "xxxx___" 5 gives "xxx_x__"&lt;/span&gt;
&lt;span class="nf"&gt;throw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="sc"&gt;'x'&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;splitAt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- Juggle pattern 100 times, then take the next (length ss) state changes.&lt;/span&gt;
&lt;span class="c1"&gt;-- This creates a list of maps between starting state&lt;/span&gt;
&lt;span class="c1"&gt;-- (say, xxxx___), throw (e.g. 5), and resulting state (xxx_x__)&lt;/span&gt;
&lt;span class="nf"&gt;grEdges&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;scanl&lt;/span&gt; &lt;span class="n"&gt;nextEdge&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;emptyState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;nextEdge&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;startState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;endState&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;emptyState&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;replicate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sc"&gt;'_'&lt;/span&gt;

&lt;span class="c1"&gt;-- Print table for a given siteswap&lt;/span&gt;
&lt;span class="nf"&gt;printTable&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;unlines&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;showSt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grEdges&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;showSt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then, we can get the tables for both siteswaps we're interested in.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printTable&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;digitToInt&lt;/span&gt; &lt;span class="s"&gt;"66671777161"&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xxxxx__&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xxxx_x_&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xxx_xx_&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xx_xxx_&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x_xxx_x&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xxxx_x_&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xxx_x_x&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xx_x_xx&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x_x_xxx&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xx_xxx_&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x_xxxx_&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printTable&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;digitToInt&lt;/span&gt; &lt;span class="s"&gt;"6316131"&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xxx___&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xx___x&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x_x_x_&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xx_x__&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x_x__x&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xx__x_&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x_xx__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc3f70ef" class="outline-3"&gt;
&lt;h3 id="orgc3f70ef"&gt;66671777161&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc3f70ef"&gt;
&lt;p&gt;
Here, there are two states that occur more than once. I've marked the pairs here
as a and b. This means you can juggle the patterns between the As (I.e. 6671,
and 7771616), and Bs (717771, and 61666)
&lt;/p&gt;

&lt;pre class="example"&gt;
1| xxxxx__
6| xxxx_x_ A
6| xxx_xx_
6| xx_xxx_ B
7| x_xxx_x
1| xxxx_x_ A
7| xxx_x_x
7| xx_x_xx
7| x_x_xxx
1| xx_xxx_ B
6| x_xxxx_
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org36f99d1" class="outline-3"&gt;
&lt;h3 id="org36f99d1"&gt;6316131&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org36f99d1"&gt;
&lt;p&gt;
Here, this siteswap has no duplicated states, and is therefore prime.
&lt;/p&gt;
&lt;pre class="example"&gt;
1| xxx___
6| xx___x
3| x_x_x_
1| xx_x__
6| x_x__x
1| xx__x_
3| x_xx__
&lt;/pre&gt;

&lt;p&gt;
We can also use this to make a graph of these patterns. Graphing them using
graphviz. This code prints into pretty much the Dot format used by graphviz, and the
resulting graphs are shown below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;printGraph&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;unlines&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;showSt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grEdges&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;showSt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;startSt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endSt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"  "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;startSt&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;" -&amp;gt; "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;endSt&lt;/span&gt;
	  &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;" [label=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;]"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/ss1.png" alt="ss1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Siteswap map for 66671777161. We can see the two states we found (labeled A and B) before in the nodes with 2 input and output edges.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Here we can see the results for our first part, 66671777161. Any closed loop in this is a valid
siteswap, which are (hopefully) just the 4 we found before. Pretty neat!
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/ss2.png" alt="ss2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2: &lt;/span&gt;Siteswap map for 6316131&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
As expected, \(6316131\) is prime so the graph is simply a loop with no repeated states.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbc6eec4" class="outline-2"&gt;
&lt;h2 id="orgbc6eec4"&gt;q8&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc6eec4"&gt;
&lt;p&gt;
&lt;i&gt;There is 1 ground state 5 ball trick of length 1 (5), 2 of length 2&lt;/i&gt;
&lt;i&gt;(55, 64), 6 of length 3 (555, 564, 645, 663, 744, 753), 24 of length&lt;/i&gt;
&lt;i&gt;4, 120 of length 5, and 720 of length 6.  Clearly the pattern is N =&lt;/i&gt;
&lt;i&gt;L!, which is a big hint that L elements are being permuted.  What L&lt;/i&gt;
&lt;i&gt;things are permuted by ground state site swaps of length L?  (Bear in&lt;/i&gt;
&lt;i&gt;mind that L is not the number of balls.)&lt;/i&gt;
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/q8_1.png" alt="q8_1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3: &lt;/span&gt;A continuous 5 ball cascade, breaking for a period 4 siteswap, before resuming.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Looking at siteswaps of length 4, for example. Here, we can assign a, b, c, d to
whatever we want, but we're limited with what we can connect to. The question
becomes: How many ways can we connect up the arrows to form valid patterns.
&lt;/p&gt;

&lt;p&gt;
Any way that we can connect up these, so that every node has 0 or 1 throws going
to it, and the same number of throws leaving it will be a valid pattern.
&lt;/p&gt;

&lt;p&gt;
We can look at each throw in turn, and see what it's possible to connect it to.
a already receives a throw, so it can't be a 0. It can't connect to b, c, d, or
the following 5 because they already have arrows connecting to them.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/q8_2.png" alt="q8_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 4: &lt;/span&gt;There are 4 possible values for a, shown in red.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Here, in red, are the possible throws from \(a\). \(a \in \{5,6,7,8\}\). It can be seen that b, c, and d,
can also throw to these same 4 positions. However, only one can throw to each.
We need to choose an ordering for these 4 throws to land. The number of ways to
order 4 objects is 4!. By this logic, we can see how it'll be \(l!\) for any number
of throws (until we start getting 0sâ¦ See next q).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org38f1906" class="outline-2"&gt;
&lt;h2 id="org38f1906"&gt;q9&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org38f1906"&gt;
&lt;p&gt;
&lt;i&gt;There are not 7! = 5040 ground state 5 ball patterns of length 7,&lt;/i&gt;
&lt;i&gt;as the above pattern would suggest (the actual number is around&lt;/i&gt;
&lt;i&gt;4300). Why does the pattern break down?  Can you calculate (not by&lt;/i&gt;
&lt;i&gt;brute force!) how many ground state patterns there are for L =&lt;/i&gt;
&lt;i&gt;7,8,9,â¦?&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
This is due to there being 0s in the pattern. As before we can connect these
arrows in any way, but sometimes in later throws we won't have a ball to throw.
&lt;/p&gt;

&lt;p&gt;
Another way of approaching the previous question is to reverse it. Instead of
looking at the throws being made at a point, look instead at the number of
places the throws can come from.
look at the throws landing at a
point. a,b,c,d,e already have their throws chosen, so we're looking at the
subsequent 5 throws. Since we require a ball to land at
each of these times, we can just times together all the ways these arrows could
be directed.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/q9_1.png" alt="q9_1.png"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Here, there are a choice of 5 throws that can land at this time. For the
following throw, there are only 4 left, and after is 3 etc. This approach leads
us to the same answer as before: n!.
&lt;/p&gt;

&lt;p&gt;
Where this falls apart however is for longer sequences..
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/q9_2.png" alt="q9_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 6: &lt;/span&gt;f or g could be a 0, and so the arrows in blue may not be possible. This is the problem with our current method.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Here, this method falls apart - we don't know if f or g will even 'contain' a
ball for us to throw. Because of this, if we were to continue the previous
method - we'd overestimate the number of siteswaps of any given length.
&lt;/p&gt;

&lt;p&gt;
However, having a 0 in a pattern is pretty much the same as inserting a space
into a shorter siteswap. If we were able to work out the number of siteswaps of
a shorter length with no 0s, and then multiply it by the number of ways we could
'insert' a 0 into that siteswapâ¦ We'd be able to work out the number of
siteswaps of any given length despite there being 0s.
&lt;/p&gt;

&lt;p&gt;
Here's an example of this insertionâ¦ We can create all siteswaps with 0s
similarly by adding gaps into siteswaps without 0s.
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/q9_3.png" alt="q9_3.png"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/q9_4.png" alt="q9_4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 8: &lt;/span&gt;Siteswap 504 has exactly the same arrow placement as 33, but with an added 0. All siteswaps with 0s have exactly one siteswap without 0s they map to.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
So with this in mind, we can calculate the total number of siteswaps of length
\(L\) by:
&lt;/p&gt;

&lt;div class="org-center"&gt;
&lt;p&gt;
\(\sum_{l=1}^{L}\) (arrow permutations of length \(l\)) \(*\) (ways to insert \(L-l\) gaps into a siteswap of length \(l\))
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org79df576" class="outline-3"&gt;
&lt;h3 id="org79df576"&gt;Arrow permutations:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org79df576"&gt;
&lt;p&gt;
To work out the permutations of length l, we can use the method we had before.
We go through the catches, and work out where the throw could've come from. Now
that we've no 0s, any unassigned throw before can be used.
&lt;/p&gt;

&lt;p&gt;
The first \(n\), where \(n\) is the number of balls are already determined by the
incoming cascade throws. After that, we have n throws that can land at any
point.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/siteswap_qs/q9_5.png" alt="q9_5.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 9: &lt;/span&gt;The n (n = 5 here) throws that could arrive at f. After picking the throw to arrive at f, we'll still have n choices for g - since f is now a possible source.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
As long as the pattern is going, we have \(n\) places the throw could've been
made. We go through the siteswap from left to right, picking each throw source
in turn. Therefore, the number of possible sources remains the same - \(n\).
&lt;/p&gt;

&lt;p&gt;
From the previous question, for \(n\) throws following the pattern we have one
less choice each time, totalling \(n!\).
&lt;/p&gt;

&lt;p&gt;
The total number of arrow permutations therefore is
&lt;/p&gt;

&lt;p&gt;
\[ p = \begin{cases}
      l! &amp;amp; l &amp;lt;= n \\
      n! * n^{l-n} &amp;amp; otherwise
   \end{cases}
\]
&lt;/p&gt;

&lt;p&gt;
Since we already know how many ground state siteswaps there are for \(l &amp;lt;= n\),
(I.e. l!) we'll ignore this case for now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8586587" class="outline-3"&gt;
&lt;h3 id="org8586587"&gt;Gap insertion&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8586587"&gt;
&lt;p&gt;
Given a siteswap of length \(l\) with no gaps, we're looking to insert them so as
to end up with one of length \(L, L &amp;gt;= l\).
&lt;/p&gt;

&lt;p&gt;
Another way to phrase this is to say given a sequence of length \(L\), we have to
choose positions for the \(L-l\) gaps. We can't choose
the first \(n\) places though, since the siteswap is ground state.
&lt;/p&gt;

&lt;p&gt;
This is just \({L-n \choose L-l}\), as long as \({ L-n \geq L-l } \implies { l \geq
n }\). There is no way to insert gaps into a siteswap that's shorter than the
number of balls.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0e87e4f" class="outline-3"&gt;
&lt;h3 id="org0e87e4f"&gt;Putting it all together:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0e87e4f"&gt;
&lt;p&gt;
Lets insert what we have into the equation.
&lt;/p&gt;
&lt;div class="org-center"&gt;
&lt;p&gt;
\(\sum_{l=1}^{L}\) (arrow permutations of length \(l\)) \(*\) (ways to insert \(L-l\) gaps into a siteswap of length \(l\))
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Since there are 0 ways to insert gaps into siteswaps where \(n &amp;lt; L\), and we already know
from the previous question that the number of siteswaps in this case is \(L!\),
we'll omit this case and come back to it.
&lt;/p&gt;

&lt;p&gt;
\[ s(L, n) = \sum_{l=1}^{L} \bigg[ \begin{cases}
      l! &amp;amp; l &amp;lt;= n \\
      n! * n^{l-n} &amp;amp; otherwise
   \end{cases} * {L \choose l} \bigg] \]
&lt;/p&gt;

&lt;p&gt;
\[ = \sum_{l=n}^{L} \bigg[n! * n^{l-n} * {L-n \choose L-l} \bigg], l \geq n \]
&lt;/p&gt;

&lt;p&gt;
Which gives us the number of ground state siteswaps for a given number of balls (\(n\)) and
length (\(l, l \geq n\))! We can test it to get an answer for how many siteswaps of
length 7 there are:
&lt;/p&gt;

&lt;p&gt;
\[ s(7, 5) = \sum_{l=5}^{7} \bigg[5! * 5^{l-5} * {2 \choose 7-l} \bigg] =
5!(5^0*1 + 5^1*2 + 5^2*1) = 4320 \]
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge15fa58" class="outline-3"&gt;
&lt;h3 id="orge15fa58"&gt;Simplify&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge15fa58"&gt;
&lt;p&gt;
We can simplify this formula a lot further! First taking \(n!\) out side the sum.
&lt;/p&gt;

&lt;p&gt;
\[ = n! * \sum_{l=n}^{L} \bigg[n^{l-n} * {L-n \choose L-l} \bigg] \]
&lt;/p&gt;

&lt;p&gt;
Substitute \(k+n = l\)
\[ = n! * \sum_{k=0}^{L-n} \bigg[n^{k} * {L-n \choose L-k-n} \bigg] \]
&lt;/p&gt;

&lt;p&gt;
Next, substitute \(L-n = d\)
\[ = n! * \sum_{k=0}^{d} \bigg[n^{k} * {d \choose d-k} \bigg] \]
&lt;/p&gt;

&lt;p&gt;
Then we have:
\[ { d \choose d-k } = \frac{d!}{k!(d-k)!} = { d \choose k } \]
&lt;/p&gt;

&lt;p&gt;
\[ \therefore s(l, n) = n! * \sum_{k=0}^{d} \bigg[n^{k} * {d \choose k} \bigg],
l \geq n \]
&lt;/p&gt;

&lt;p&gt;
This can be simplified with the binomial theorem identity, with n = d, a = 1, b
= n.
\[ \sum_{i=0}^{n} {n \choose i} a^{n-i}b^{i} = (a+b)^n \]
&lt;/p&gt;

&lt;p&gt;
\[ \therefore s(L, n) = n! * (n+1)^d \]
&lt;/p&gt;

&lt;p&gt;
And reverting the substitutions
\[ \therefore s(L, n) = n! * (n+1)^{(L-n)} \]
&lt;/p&gt;

&lt;p&gt;
And adding back in the case for l &amp;lt;= n.
\[ \therefore s(L, n) = \begin{cases}
      l! &amp;amp; l &amp;lt;= n \\
      n! * (n+1)^{L-n} &amp;amp; otherwise
   \end{cases} \]
&lt;/p&gt;

&lt;p&gt;
Whichâ¦ FINALLY gives us the the answer! Phew!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>juggling</category><category>math</category><guid>https://imois.in/posts/jack-boyces-siteswap-questions/</guid><pubDate>Mon, 06 May 2019 18:47:08 GMT</pubDate></item><item><title>Procedural Animation 2: Functions</title><link>https://imois.in/posts/procedural-animation-2-functions/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-orgfe2d1fa" class="outline-2"&gt;
&lt;h2 id="orgfe2d1fa"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfe2d1fa"&gt;
&lt;p&gt;
In this second section, I wanted to talk about functionsâ¦ And how to take simple
movements and build more complex animations from them. Be warned: &lt;i&gt;Here be graphs&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
We'll be using the idea of &lt;b&gt;State&lt;/b&gt;, &lt;b&gt;Update&lt;/b&gt;, &lt;b&gt;Apply&lt;/b&gt; from &lt;a href="https://imois.in/posts/procedural-animation-1-state-machines/"&gt;Part 1&lt;/a&gt; here too. If
you haven't read that, you might want to start there!
&lt;/p&gt;

&lt;p&gt;
And finally, all of the animations are running in javascript canvas, so you can open the
source code in the inspector or find it on &lt;a href="https://github.com/oisincar/imois.in/tree/src/files/assets/js/procedural_animation"&gt;my github for the site!&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1f73c43" class="outline-2"&gt;
&lt;h2 id="org1f73c43"&gt;Bouncing ball&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1f73c43"&gt;
&lt;p&gt;
How to make this?
&lt;/p&gt;

&lt;script src="https://imois.in/assets/js/procedural_animation/BouncingBalls.js"&gt;&lt;/script&gt;&lt;div class="figure"&gt;
    &lt;canvas id="balls0" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; Moving the ball&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls0', 0, 1); &lt;/script&gt;&lt;p&gt;
For the &lt;b&gt;State&lt;/b&gt;, we can just have a single number that varies from 0 to 1:
The percentage through the animation we are so far.
&lt;/p&gt;

&lt;p&gt;
This means our &lt;b&gt;Update&lt;/b&gt; can turn the elapsed time into a percentage value and
add it to the &lt;b&gt;State&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
And our &lt;b&gt;Apply&lt;/b&gt; can move the ball based on the state variables, and draw it. For
this, we only need to change the y coordinate:
&lt;/p&gt;

&lt;p&gt;
y = state*k, where k a scaling value for how far the ball moves.
&lt;/p&gt;


&lt;p&gt;
In code this looks like:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// CONFIG:&lt;/span&gt;
&lt;span class="c1"&gt;// 'scale in time', length of animation&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 'scale in space', distance ball moves&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;40.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 'offset in space'&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt; &lt;span class="n"&gt;_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;(..);&lt;/span&gt;

&lt;span class="c1"&gt;// STATE:&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// dt is the change in time.&lt;/span&gt;
    &lt;span class="c1"&gt;// UPDATE state:&lt;/span&gt;
    &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// 1_|&lt;/span&gt;
    &lt;span class="c1"&gt;//   | /| /| /| /|....&lt;/span&gt;
    &lt;span class="c1"&gt;// 0_|/ |/ |/ |/ |&lt;/span&gt;

    &lt;span class="c1"&gt;// APPLY&lt;/span&gt;
    &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_offset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The update line can be a bit confusing, but might make more sense when split up a bit more.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Equilivent to (all of):&lt;/span&gt;
&lt;span class="c1"&gt;// The change in how far we are through the animation.&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Added to _animationPerc&lt;/span&gt;
&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dPerc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// And wrap back to 0 if we're &amp;gt; 1;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We're working out how much further we are through the animation (```dPerc```)
which is our change it time divided by the duration of the animation. Say our
animation is 2 seconds long, and 1 second just elapsedâ¦ We're now half-way
further through than before.
&lt;/p&gt;

&lt;p&gt;
It might be helpful to think of the shape this variable (or all variables) make over time. A
lot of these animations can be thought of as the &lt;b&gt;Apply&lt;/b&gt; function reshaping the &lt;b&gt;State&lt;/b&gt; variables.
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/animation_perc.png" alt="animation_perc.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;The shape of _animationPerc over time, where d is the duration of the animation, makes a sawtooth shape.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
In this example, our &lt;b&gt;Apply&lt;/b&gt; function just scales the &lt;b&gt;State&lt;/b&gt; by _dist. This is
then the y offset of the ball for that frame, as shown in the animation above.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/animation_apply1.png" alt="animation_apply1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2: &lt;/span&gt;Here, the input &lt;b&gt;State&lt;/b&gt; (Blue), is scaled to give the ball's positional offset by the &lt;b&gt;Apply&lt;/b&gt; function (Orange).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgc2fb241" class="outline-2"&gt;
&lt;h2 id="orgc2fb241"&gt;Different Applications (heh)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc2fb241"&gt;
&lt;p&gt;
By just changing the &lt;b&gt;Apply&lt;/b&gt; function here, we can get a variety of different
movements. We can think of these movements as transformations of the origional
&lt;b&gt;State&lt;/b&gt; graph, since this is the only input.
&lt;/p&gt;

&lt;p&gt;
First lets move the ball up and down in wave like thisâ¦
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls1" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 2:&lt;/span&gt; Wavey ball&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls1', 1, 1); &lt;/script&gt;&lt;p&gt;
Here, since \(sin(x)\) has a period of \(2*\pi\), we need to scale our state
variable by that so it loops properly.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://imois.in/posts/"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
In code, this is as easy as:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By doing this to both the x and y axis at the same time, offset by a bit, we can get a circle!
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls2" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 3:&lt;/span&gt; Circles&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls2', 2, 1); &lt;/script&gt;&lt;p&gt;
Which, again, in code is just:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// NOTE Equilivent to: ball.y = sin(2 * Math.PI * _animationPerc + Math.PI);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This idea can be taken much further, and leads to some really cool movements!
The &lt;a href="https://en.wikipedia.org/wiki/Lissajous_curve"&gt;Lissajous Curves&lt;/a&gt; are created when you scale the x and y parts differently in
a way very similar to above ^. That's a whole different blog post though!
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/1lissajous.gif" alt="1lissajous.gif" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3: &lt;/span&gt;The different shapes that can be made by scaling the inputs to sin/cos into different ratios. If these were animated like the ball above, the ball would follow the shape.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3080da1" class="outline-2"&gt;
&lt;h2 id="org3080da1"&gt;Zigzag&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3080da1"&gt;
&lt;p&gt;
This is a slighly harder example for the idea of manipulating function shapes.
&lt;/p&gt;

&lt;p&gt;
We start off with our input shape as beforeâ¦ And keeping in mind our goal output shape (to get
the animation above).
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/zigzag0.png" alt="zigzag0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 4: &lt;/span&gt;Input _animationPerc (Blue), compared to the shape we need (Orange).&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
We can perform several steps to transform it into the right shapeâ¦ Scaling it
up by 2 and moving it down by 1 (Orange). Then we can take the absolute value of
this (Green).
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/zigzag1.png" alt="zigzag1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 5: &lt;/span&gt;Input (Blue), scaled &amp;amp; transformed (Orange), result (Green)&lt;/p&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;zigzag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zigzag&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3d2f828" class="outline-2"&gt;
&lt;h2 id="org3d2f828"&gt;Bouncing balls&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d2f828"&gt;
&lt;p&gt;
In order to create a realistic bounce, we have to first construct the right
shape function again. Without delving into the physics of it, we're looking for
a Parabola: Some function of \(t^2\).
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/bounce0.png" alt="bounce0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 6: &lt;/span&gt;Input (Blue), vs bounce shape (Orange)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Interestingly, we can get this shape from our zigzag before, by applying an
extra transformation: 1-zigzag&lt;sup&gt;2&lt;/sup&gt;.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls4" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 5:&lt;/span&gt; Bouncing balls&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls4', 4, 1); &lt;/script&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;zigzag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zigzag&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;zigzag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgda2883c" class="outline-2"&gt;
&lt;h2 id="orgda2883c"&gt;More Ideas&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgda2883c"&gt;
&lt;p&gt;
We can clamp zigzag so it's 1 for some time, which means
the ball will sit on the ground for a bitâ¦ By animating the scaling too, maybe this could
be an animation for a slime NPC?
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/bounce1.png" alt="bounce1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 7: &lt;/span&gt;Basic zigzag curve (Blue), zigzag/0.8 and clamped between 0 and 1 (Orange), and finally the output shape - bouncing ball with a pause (Green).&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
And how it looks animatedâ¦
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls5" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 6:&lt;/span&gt; Bouncing balls&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls5', 5, 1); &lt;/script&gt;&lt;p&gt;
And also we can have loads of balls by just adding an offset for the &lt;b&gt;State&lt;/b&gt;
value to each one! With some polish this could maybe make a kind of snake creature for a gameâ¦
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls6" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 7:&lt;/span&gt; Bouncing balls&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls6', 6, 10); &lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgebb6aee" class="outline-2"&gt;
&lt;h2 id="orgebb6aee"&gt;Other applications&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgebb6aee"&gt;
&lt;p&gt;
While here, I've only done animations by moving things, it's also possible to
animate rotations, shaders, skeletons, and more with exactly the same ideas.
&lt;/p&gt;

&lt;p&gt;
Tune in for part 3 when I'll cover a more complicated idea: Using
gradient descent for solving constraints in procedural animation (but with fun
interactive animations!!).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>animation</category><category>gamedev</category><category>programming</category><guid>https://imois.in/posts/procedural-animation-2-functions/</guid><pubDate>Sat, 27 Apr 2019 23:00:48 GMT</pubDate></item><item><title>Procedural Animation 1: State Machines</title><link>https://imois.in/posts/procedural-animation-1-state-machines/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-org59059e7" class="outline-2"&gt;
&lt;h2 id="org59059e7"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59059e7"&gt;
&lt;p&gt;
This is the first in a 3 part series on procedural animation, all taken from a talk
I gave in January of 2019. The posts ramp up in complexity, and I've tried to make
the animations interactive where possible!
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;This first post justifies and covers a general mentality I have for working on
procedural animations, and applies it to a simple example.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://imois.in/posts/procedural-animation-2-functions/"&gt;The second post&lt;/a&gt; gives a more powerful and harder tool - talking about function
shapes, and how you can build more complex behavour by combining simple movements.&lt;/li&gt;
&lt;li&gt;The third and final post (coming soon) covers inverse kinematics, and generally how to
approximate solutions much harder problems using gradient descent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All of the animations are running in javascript canvas, so you can open the
source code in the inspector or find it on &lt;a href="https://github.com/oisincar/imois.in/tree/src/files/assets/js/procedural_animation"&gt;my github for the site!&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org203cbec" class="outline-2"&gt;
&lt;h2 id="org203cbec"&gt;Differences vs traditional animation.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org203cbec"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Advantages:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Greater (infinite?) variety.
Simulate large numbers easily.&lt;/li&gt;
&lt;li&gt;Can react to player/ world better.&lt;/li&gt;
&lt;li&gt;When done well: More realistic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;Disadvantages:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Loss of control. Can be harder to tweak.&lt;/li&gt;
&lt;li&gt;Hard to get very charachterful movement. Can look robotic
(Unless that's intentionalâ¦)&lt;/li&gt;
&lt;li&gt;When it breaks it often breaks hard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb3e09a0" class="outline-2"&gt;
&lt;h2 id="orgb3e09a0"&gt;State, Update &amp;amp; Apply&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb3e09a0"&gt;
&lt;p&gt;
This is the core of how I approach these animations. I find it's helpful to try
and break down the system into 3 parts - State, Update, and Apply. These
systems can very easily become hard to tweak and work with, and this is just one
tool that might help with that.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;
&lt;b&gt;State&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;One or more variables, no logic.&lt;/li&gt;
&lt;li&gt;All we need to know to draw a frame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;b&gt;Update&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Changes (only) state variables on each frame or update cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;b&gt;Apply&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Move and/or draw stuff according to state.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Each part can be thought about separately, and by moving the state into a clear
separate variable the system becomes much easier to reason about. Animations
won't go out of sync, and it's to debug as you can just view and edit the state directly.
&lt;/p&gt;

&lt;p&gt;
Anywayâ¦ Lets look at an example!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9b6cc16" class="outline-2"&gt;
&lt;h2 id="org9b6cc16"&gt;Example: Light&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9b6cc16"&gt;
&lt;p&gt;
State machines are one of the simplest forms of procedural animation. The idea
is there is a single 'state' we're in, and also a set of
rules for why/ when we change state. State machines are often used in game AI -
where states might be { &lt;b&gt;Defend&lt;/b&gt;, &lt;b&gt;Rush&lt;/b&gt;, &lt;b&gt;Flank&lt;/b&gt; }, or for a character: { &lt;b&gt;Falling&lt;/b&gt;,
&lt;b&gt;Walking&lt;/b&gt;, &lt;b&gt;Sprinting&lt;/b&gt;, &lt;b&gt;Attacking&lt;/b&gt; }.
&lt;/p&gt;

&lt;p&gt;
Here we've just got a light, our &lt;b&gt;State&lt;/b&gt; is one of: { &lt;b&gt;On&lt;/b&gt;, &lt;b&gt;Off&lt;/b&gt; }.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="lightswitch" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; Randomly flickering light.&lt;/p&gt;
&lt;/div&gt;
&lt;script src="https://imois.in/assets/js/procedural_animation/LightSwitch.js"&gt;&lt;/script&gt;&lt;p&gt;
The second part of State, Update, Apply: &lt;b&gt;Update&lt;/b&gt;, is also simple. We randomly
choose to either stay in the current state or move to the other. I found
a \(98\%\) chance to stay &lt;b&gt;On&lt;/b&gt; and a \(93\%\) chance to stay &lt;b&gt;Off&lt;/b&gt; works decently.
&lt;/p&gt;

&lt;p&gt;
We can view the state and the transitions as a graph, where the arrows denote
probabilities.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/light_state.png" alt="light_state.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Light state diagram&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
And finally, our Apply section simply determines if we should draw a circle that
frame, or leave the frame blank.
&lt;/p&gt;

&lt;p&gt;
Overall, our code looks like thisâ¦
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// STATE&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// UPDATE:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.93&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// APPLY:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="c1"&gt;// Draw here!!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Tune in next time for some more interesting examples!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>animation</category><category>gamedev</category><category>programming</category><guid>https://imois.in/posts/procedural-animation-1-state-machines/</guid><pubDate>Thu, 25 Apr 2019 23:00:48 GMT</pubDate></item></channel></rss>