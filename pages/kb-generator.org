#+BEGIN_COMMENT
.. title: Puzzle Keyboard Layout Generator
.. slug: kb-generator
.. date: 2022-10-30 17:04:14 UTC
.. tags:
.. category:
.. link:
.. description:
.. type: text

#+END_COMMENT

* Introduction
This is a generator for the puzzle keyboard. It creates a =.svg= file that can be laser cut out of acrylic and assembled.

You may wish to update the kerf field, which is the diameter of the laser used to cut the keyboard, to ensure a snug fit with your switches. We used Ponoko which (at the time of order) had a kerf of 0.105mm.

* Configuration
#+BEGIN_EXPORT html
<script src="../assets/js/kb-designer/designer.js"></script>

<form name="rebuildform">
  <label>Config - Left Half</label>
  <br>
  <textarea name="left_text" rows="5" style="-webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; width: 100%;">
  </textarea>
  <br>
  <label>Config - Right Half</label>
  <br>
  <textarea name="right_text" rows="5" style="-webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; width: 100%;">
  </textarea>
  <br>

  <p style="width: 100%; text-align: center">
    <button id="toggle_b_button" style="font: 1.0rem/2rem 'Open Sans', 'Microsoft Yahei', 'DejaVu Sans', sans-serif">Toggle B Button Position</button><br>
  </p>

  <div class="form-table">
    <p>
      <label>Center split offsets</label>
      <input type="text" name="edge_offsets"/>
    </p>

    <p>
      <label>Key Spacing (mm)</label>
      <input type="number" name="u" step="any"/>
    </p>

    <p>
      <label>Keyswitch Hole Size (mm)</label>
      <input type="number" name="hole_width" step="any"/><br>
    </p>

    <p>
      <label>Laser Diameter (kerf) (mm)</label>
      <input type="number" name="kerf" step="any"/><br>
    </p>

    <p>
      <label>Board Padding (space around outside)</label>
      <input type="number" name="board_padding" step="any"/><br>
    </p>

    <p>
      <label>Board Top Padding (additional top leeway)</label>
      <input type="number" name="board_padding" step="any"/><br>
    </p>

    <p>
      <label># keys in each half (x axis)</label>
      <input type="number" name="board_key_width" step="any"/><br>
    </p>

    <p>
      <label># keys in each half (y axis)</label>
      <input type="number" name="board_key_height" step="any"/><br>
    </p>

    <p>
      <label>Corner Radius</label>
      <input type="number" name="corner_radius" step="any"/><br>
    </p>

    <p>
      <label>Outer Screw Hole Diameter</label>
      <input type="number" name="screw_size_small" step="any"/><br>
    </p>

    <p>
      <label>Internal Spacer Hole Diameter</label>
      <input type="number" name="screw_size_big" step="any"/><br>
    </p>

    <p>
      <label>Screw Square Dimensions</label>
      <input type="number" name="screw_square" step="any"/><br>
    </p>

    <p>
      <label>Create Extra Layer</label>
      <input type="checkbox" name="create_extra_layer" value="true"/><br>
    </p>

    <p>
      <label>Final Layout External Padding</label>
      <input type="number" name="board_offset_padding_external" step="any"/><br>
    </p>

    <p>
      <label>Final Layout Packing Margin X</label>
      <input type="number" name="board_offset_padding_x" step="any"/><br>
    </p>

    <p>
      <label>Final Layout Packing Margin Y</label>
      <input type="number" name="board_offset_padding_y" step="any"/><br>
    </p>
  </div>

  <p style="width: 100%; text-align: center">
    <button type="submit" style="font: 1.0rem/2rem 'Open Sans', 'Microsoft Yahei', 'DejaVu Sans', sans-serif">Rebuild SVG</button>
  </p>

</form>

<div>
  <!-- I've no idea why setting a large font size here makes a difference, but it does... -->
  <div id="svg_result" style="border: 1px solid black; font-size: 100px;"></div>
</div>

#+END_EXPORT

#+BEGIN_SRC inline-js

$("#toggle_b_button").on('click', function() {
  c.update_params_for_b_key(!c.b_key_on_right);
  buildFormFromConfig();
});

// Initilize form data based on the config data.
function buildFormFromConfig() {
  var props = Object.getOwnPropertyNames(c);
  for (p of props) {
    console.log(p);
    var v = c[p];
    if (typeof(v) === "number") {
      // Note +: Hack to conv to number & remove trailing 0s.
      v = +v.toFixed(4);
    }
    if (typeof(v) === "boolean") {
      $(`[name="${p}"]`).prop("checked", v);
    }
    else {
      $(`[name="${p}"]`).val(v);
    }
  }
 var other_side = c.b_key_on_right ? "right" : "left";
 $("#toggle_b_button").text(`Change B button to ${other_side} side`);
}

buildFormFromConfig();

function rebuildConfigFromForm() {
  var formResArray = $("form").serializeArray();

  // Checkboxes aren't in serializeArray unless they're checked. Default to false...
  c.create_extra_layer = false;

  for (var res of formResArray) {
    var prop = res.name;
    var val = res.value;

    var prev_val = c[prop];
    console.log(prev_val);

    if (typeof(prev_val) === "number") {
      val = Number(val);
    }
    else if (typeof(prev_val) === "boolean") {
      val = true;
    }
    else if (prop === "edge_offsets") {
      // special case to handle list of offsets
      val = val.split(",").map(n => Number(n));
    }

    c[prop] = val;
  }
  c.update();
}

function regenerateKbSVG() {
  var fullSvg = getFullKbSVG();
  $("#svg_result").html(fullSvg);
}

$("form").on('submit', function (e) {
  e.preventDefault();

  rebuildConfigFromForm();
  regenerateKbSVG();
});

rebuildConfigFromForm();
regenerateKbSVG();
#+END_SRC
