#+BEGIN_COMMENT
.. title: Learning The Properties of a Fair 3-Sided Coin
.. slug: learning-a-fair-3-sided-dice
.. date: 2020-08-23 22:30:01 UTC+01:00
.. tags: math, programming
.. category: math
.. link:
.. has_math: true
.. description:
.. type: text
.. status: draft
#+END_COMMENT

* Intro
#+BEGIN_EXPORT html
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/oimo/1.0.9/oimo.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/101/three.min.js"></script>
#+END_EXPORT

A coin effectively has 2 sides, heads or tails. Still, there's a chance --- albeit small --- that the coin can land on it's edge. This begs the question, how 'thick' should a coin be so that
it has equal chances of landing on any of the 3 sides (Heads, Tails, or Edge).

I learned about this problem in [[https://www.youtube.com/watch?v=-qqPKKOU-yY][this video by Matt Parker]], who looks at some mathematical ways to solve it. The approaches don't line up with my intuition though; estimating that a standard euro coin would fall on it's edge $1/20$ times ($P(E) \approx 0.0501$) via the 'sphere method', or $1/16$ via the 'triangle method' ($P(E) \approx 0.064$).

Instead of relying on maths or 'thinking' (pfft), why not just simulate it? We can vary the widths of coins, their coefficients of restitution, starting heights and velocities and see how that affects our results too.

#+BEGIN_EXPORT html
<div class="figure">

    <canvas id="physics-sim" class="light_border" width="600" height="600"> Your browser sucks :c. </canvas>

    <span style="display:flex; padding-bottom:20px">
    <div id="num_heads_box" class="stacked_bar_chart" style=" background:#ffa324">
    #Heads:&nbsp;<b id="num_heads_val">0</b>
    </div>
    <div id="num_tails_box" class="stacked_bar_chart" style="background:#ff4546">
    #Tails:&nbsp;<b id="num_tails_val">0</b>
    </div>
    <div id="num_sides_box" class="stacked_bar_chart" style="background:#48abf0">
    #Sides:&nbsp;<b id="num_sides_val">0</b>
    </div>

    </span>

    <!-- Sliders -->
    <span class="slider_row">
        <span class="slider_label">Coin Thickness</span>
        <span id="coin_width" class="flat-slider"></span>
        <span type="text" id="coin_width_val" class="slider_text"></span>
    </span>
    <span class="slider_row">
        <span class="slider_label">Restitution (Bounce)</span>
        <span id="coin_bounce" class="flat-slider"></span>
        <span type="text" id="coin_bounce_val" class="slider_text"></span>
    </span>
    <span class="slider_row">
        <span class="slider_label">Maximum Throw Spin</span>
        <span id="throw_spin" class="flat-slider"></span>
        <span type="text" id="throw_spin_val" class="slider_text"></span>
    </span>
    <span class="slider_row">
        <span class="slider_label">Drop Height</span>
        <span id="throw_height" class="flat-slider"></span>
        <span type="text" id="throw_height_val" class="slider_text"></span>
    </span>

    <span class="slider_row">
        <span class="slider_label">Num Coins <b>x</b></span>
        <span id="num_coins_x" class="flat-slider"></span>
        <span type="text" id="num_coins_x_val" class="slider_text"></span>
    </span>

    <span class="slider_row">
        <span class="slider_label">Num Coins <b>y</b></span>
        <span id="num_coins_y" class="flat-slider"></span>
        <span type="text" id="num_coins_y_val" class="slider_text"></span>
    </span>

    <div id='interface'>
        <input type="button" value="Reset Counters" onClick=reset_counts()>
        <input type="button" value="Restart Simulation" onClick=populate()>
    </div>
</div>
<script src="../assets/js/3_sided_coin/PhysicsSim.js"></script>
#+END_EXPORT

#+BEGIN_SRC inline-js
{
    $("#coin_width").slider({
        // 100x the ratio of the diameter
        min: 10,
        max: 250, // 250
        values: [coin_thickness*100],
        slide: function(event, ui) {
            $("#coin_width_val").text(ui.values[0]/100.0 + "*r");
            coin_thickness = ui.values[0]/100.0;
        },
    });
    $("#coin_width_val").text(coin_thickness + "*r");

    $("#coin_bounce").slider({
        min: 10,
        max: 80, // 80
        values: [coin_bounce*100],
        slide: function(event, ui) {
            $("#coin_bounce_val").text(ui.values[0]/100.0);
            coin_bounce = ui.values[0]/100.0;
        },
    });
    $("#coin_bounce_val").text(coin_bounce);

    $("#throw_spin").slider({
        min: 1,
        max: 50, // 50
        values: [throw_spin],
        slide: function(event, ui) {
            $("#throw_spin_val").text(ui.values[0]);
            throw_spin = ui.values[0];
        },
    });
    $("#throw_spin_val").text(throw_spin);

    $("#throw_height").slider({
        min: 10,
        max: 500,
        values: [throw_height],
        slide: function(event, ui) {
            $("#throw_height_val").text(ui.values[0]);
            throw_height = ui.values[0];
        },
    });
    $("#throw_height_val").text(throw_height);

    // slider
    $("#num_coins_x").slider({
        min: 1,
        max: 12,
        values: [num_coins_x],
        slide: function(event, ui) {
            $("#num_coins_x_val").text(ui.values[0]);
            num_coins_x = ui.values[0];
        },
    });
    $("#num_coins_x_val").text(num_coins_x);

    $("#num_coins_y").slider({
        min: 1,
        max: 12,
        values: [num_coins_y],
        slide: function(event, ui) {
            $("#num_coins_y_val").text(ui.values[0]);
            num_coins_y = ui.values[0];
        }
    });
    $("#num_coins_y_val").text(num_coins_y);
}
#+END_SRC


* Results!

Well that's fun and all, but what does it tell us? We can run trials over a variety of coin thicknesses and see how that affects the number of sides thrown compared to heads or tails.


#+BEGIN_SRC python :session :results file :exports none
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

path = "../images/learning-dice/"

def savePlt(filename):
    plt.savefig(path + filename)
    return path+filename # return this to org-mode
#+END_SRC

#+RESULTS:
[[file:None]]

#+begin_src python :session :results file :exports results
fig=plt.figure(figsize=(6,5))
# t = np.arange(0, 4.5, step=0.01)
# plt.plot(t, np.mod(t,1))

# Bounce: 0.3, Max throw spin: 10, Drop height: 100
data = [{"thickness": 0.1 , "h": 483, "t": 518, "s": 0}  ,
        {"thickness": 0.15, "h": 479, "t": 521, "s": 0}  ,
        {"thickness": 0.2 , "h": 484, "t": 514, "s": 2}  ,
        {"thickness": 0.25, "h": 488, "t": 499, "s": 13} ,
        {"thickness": 0.3 , "h": 505, "t": 476, "s": 19} ,
        {"thickness": 0.35, "h": 484, "t": 462, "s": 54} ,
        {"thickness": 0.4 , "h": 472, "t": 445, "s": 83} ,
        {"thickness": 0.45, "h": 419, "t": 426, "s": 156},
        {"thickness": 0.5 , "h": 421, "t": 428, "s": 153},
        {"thickness": 0.55, "h": 392, "t": 424, "s": 184},
        {"thickness": 0.6 , "h": 405, "t": 385, "s": 210},
        {"thickness": 0.65, "h": 409, "t": 374, "s": 217},
        {"thickness": 0.7 , "h": 357, "t": 400, "s": 243},
        {"thickness": 0.75, "h": 387, "t": 344, "s": 269},
        {"thickness": 0.8 , "h": 339, "t": 348, "s": 313},
        {"thickness": 0.85, "h": 323, "t": 338, "s": 339},
        {"thickness": 0.9 , "h": 324, "t": 312, "s": 364},
        {"thickness": 0.95, "h": 293, "t": 304, "s": 403},
        {"thickness": 1.00, "h": 286, "t": 283, "s": 431},
        {'thickness': 1.05, 'h': 229, 't': 243, 's': 529},
        {'thickness': 1.1 , 'h': 229, 't': 224, 's': 547},
        {'thickness': 1.15, 'h': 209, 't': 202, 's': 591},
        {'thickness': 1.2 , 'h': 172, 't': 184, 's': 644},
        {'thickness': 1.25, 'h': 169, 't': 189, 's': 642},
        {'thickness': 1.3 , 'h': 178, 't': 156, 's': 666},
        {'thickness': 1.35, 'h': 137, 't': 157, 's': 706},
        {'thickness': 1.4 , 'h': 127, 't': 111, 's': 762},
        {'thickness': 1.45, 'h': 113, 't': 131, 's': 756},
        {'thickness': 1.5 , 'h': 111, 't': 107, 's': 784},
        {'thickness': 1.55, 'h': 128, 't': 107, 's': 765},
        {'thickness': 1.6 , 'h': 82 , 't': 104, 's': 814},
        {'thickness': 1.65, 'h': 82 , 't': 104, 's': 814},
        {'thickness': 1.7 , 'h': 76 , 't': 112, 's': 813},
        {'thickness': 1.75, 'h': 94 , 't': 112, 's': 795},
        {'thickness': 1.8 , 'h': 89 , 't': 70 , 's': 841},
        {'thickness': 1.85, 'h': 83 , 't': 91 , 's': 826},
        {'thickness': 1.9 , 'h': 91 , 't': 62 , 's': 847},
        {'thickness': 1.95, 'h': 72 , 't': 95 , 's': 834},
        {'thickness': 2   , 'h': 65 , 't': 70 , 's': 865}]

num_trials = 1000

th = [a['thickness'] for a in data]
hs = [a['h'] for a in data]
ts = [a['t'] for a in data]
ss = [a['s'] for a in data]

plt.xlabel("Coin thickness")
plt.ylabel("Number of occurences")

pal = ['#1f77b4', '#ff7f0e', '#d62728']

plt.stackplot(th, ss, hs, ts, labels=['Sides','Heads','Tails'], colors=pal, alpha=0.8)
plt.hlines(num_trials/3, th[0], th[-1], color='#000000')
plt.hlines(num_trials*2/3, th[0], th[-1], color='#000000')
plt.grid()
plt.legend()

fig.tight_layout()
savePlt("baseline-flips.png")
#+end_src
#+CAPTION: The number of heads, tails and sides over 1000 trials with different coin thicknesses, black lines show 3rds. For all trials the coin restitution is kept at 0.3.
#+RESULTS:
[[file:../images/learning-dice/baseline-flips.png]]



#+begin_src python :session :results file :exports results
fig=plt.figure(figsize=(6,5))
# t = np.arange(0, 4.5, step=0.01)
# plt.plot(t, np.mod(t,1))

# Bounce: 0.3, Max throw spin: 10, Drop height: 100

data = [{'thickness': 0.75, "h": 3641, "t": 3613, "s": 2746},
        {'thickness': 0.76, "h": 3667, "t": 3585, "s": 2748},
        {'thickness': 0.77, "h": 3520, "t": 3565, "s": 2915},
        {'thickness': 0.78, "h": 3522, "t": 3485, "s": 2993},
        {'thickness': 0.79, "h": 3595, "t": 3480, "s": 2925},
        {'thickness': 0.80, "h": 3507, "t": 3491, "s": 3002},
        {'thickness': 0.81, "h": 3391, "t": 3509, "s": 3102},
        {'thickness': 0.82, "h": 3434, "t": 3372, "s": 3194},
        {'thickness': 0.83, "h": 3357, "t": 3410, "s": 3233},
        {'thickness': 0.84, "h": 3453, "t": 3349, "s": 3198},
        {'thickness': 0.85, "h": 3324, "t": 3316, "s": 3360},
        {'thickness': 0.86, "h": 3247, "t": 3330, "s": 3423},
        {'thickness': 0.87, "h": 3242, "t": 3324, "s": 3434},
        {'thickness': 0.88, "h": 3209, "t": 3211, "s": 3580},
        {'thickness': 0.89, "h": 3252, "t": 3180, "s": 3568},
        {'thickness': 0.90, "h": 3142, "t": 3179, "s": 3679},
        {'thickness': 0.91, "h": 3084, "t": 3173, "s": 3743},
        {'thickness': 0.92, "h": 3069, "t": 3047, "s": 3884},
        {'thickness': 0.93, "h": 3052, "t": 3060, "s": 3888},
        {'thickness': 0.94, "h": 2937, "t": 3005, "s": 4058},
        {'thickness': 0.95, "h": 2914, "t": 2992, "s": 4094}]

num_trials = 10000

th = [a['thickness'] for a in data]
hs = [a['h'] for a in data]
ts = [a['t'] for a in data]
ss = [a['s'] for a in data]

plt.xlabel("Coin thickness")
plt.ylabel("Number of occurences")

pal = ['#1f77b4', '#ff7f0e', '#d62728']

plt.stackplot(th, ss, hs, ts, labels=['Sides','Heads','Tails'], colors=pal, alpha=0.8)
plt.hlines(num_trials/3, th[0], th[-1], color='#000000')
plt.hlines(num_trials*2/3, th[0], th[-1], color='#000000')
plt.grid()
plt.legend()

fig.tight_layout()
savePlt("baseline-flips-zoom.png")
#+end_src
#+CAPTION: A zoomed version of the previous, ran over 10000 trials this time. It seems that the equal coin has a thickness of 0.85*r!
#+RESULTS:
[[file:../images/learning-dice/baseline-flips-zoom.png]]
