<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>im_oisin (Bits of math &amp; more theoritical stuff)</title><link>https://imois.in/</link><description></description><atom:link rel="self" href="https://imois.in/categories/math.xml" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:oisincar@gmail.com"&gt;Oisin Carroll&lt;/a&gt; </copyright><lastBuildDate>Sun, 05 May 2019 03:26:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Procedural Animation 3: Gradient Descent</title><link>https://imois.in/posts/procedural-animation-3-gradient-descent/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-orga5f6ea5" class="outline-2"&gt;
&lt;h2 id="orga5f6ea5"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga5f6ea5"&gt;
&lt;script src="http://visjs.org/dist/vis.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Global.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Arm.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/ArmCanvas.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Graph.js"&gt;&lt;/script&gt;&lt;p&gt;
In this second section, we'll cover how to solve harder problems that don't
necessarily have a single solution, or ones that have solutions that can't be
written as an equation of known variables.
&lt;/p&gt;

&lt;p&gt;
We'll be using the idea of &lt;b&gt;State&lt;/b&gt;, &lt;b&gt;Update&lt;/b&gt;, &lt;b&gt;Apply&lt;/b&gt; from &lt;a href="https://imois.in/posts/procedural-animation-1-state-machines/"&gt;Part 1&lt;/a&gt; here too. If
you haven't read that, you might want to start there!
&lt;/p&gt;

&lt;p&gt;
You might also want to check out &lt;a href="https://imois.in/posts/procedural-animation-2-functions"&gt;Part 2&lt;/a&gt;, where we went over how to build up more
complex movement by combining functions of state.
&lt;/p&gt;

&lt;p&gt;
And finally, all of the (interactive!) animations here are running in javascript canvas, so you can open the
source code in the inspector or find it on &lt;a href="https://github.com/oisincar/imois.in/tree/src/files/assets/js/procedural_animation"&gt;my github for the site!&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgab4a00d" class="outline-2"&gt;
&lt;h2 id="orgab4a00d"&gt;What we'll make!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgab4a00d"&gt;
&lt;p&gt;
These tenticles/ arms/ vines might make a fun enemy or background in a game, but
also demonstrate an idea that can be used to solve all kinds of problems! The
same idea (gradient descent) is the backbone of all modern AI… And all you
need to understand it is a basic knowledge of derivitives.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="intro-demo-arms" class="light_border" width="400" height="300"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; Reaching arms with 20 and 100 segments. Drag to move the ball!&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
class GradientDescentLongChain {

    constructor(id) {
        var self = this;

        var armC = new ArmCanvas(
            document.getElementById(id),
            function(){self.finished = false;});

        this.arm = new Arm(20, 300, -250);
        this.arm2 = new Arm(100, 100, -50);

        armC.addArm(this.arm);
        armC.addArm(this.arm2);

        // Double arm length
        this.arm._lengths = this.arm._lengths.map(function(x) { return x*1.7; });
        this.arm2._angles = this.arm2._angles.map(function(x) { return 0; });

        var doUpdate = true;
        if (doUpdate)
            setInterval(function() { self.update(); }, self.interval);
    }

    improve(arm) {
        // var grads = this.arm.calculateCurrentGradients();
        var grads = arm.calculateCurrentGradientsSq();

        // Update arm angles!
        for (var i = 0; i &lt; grads.length; i++) {
            arm.changeAngle(i, -grads[i]*0.00001);
        }

        // If we're now close enough, don't update til we have to again.
        if (arm.getCurrentError() &lt; 0.05) {
            return true;
        }
        return false;
    }

    update() {
        // Only do stuff if we're not already at the target.
        if (!this.finished) {
            // Finished if both arms are finished
            var a1 = this.improve(this.arm);
            var a2 = this.improve(this.arm2);
            this.finished = a1 &amp;&amp; a2;
        }
    }
}

var b = new GradientDescentLongChain('intro-demo-arms');
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org71f3e00" class="outline-2"&gt;
&lt;h2 id="org71f3e00"&gt;The problem: Kinematics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org71f3e00"&gt;
&lt;p&gt;
Generally, (and according to google) kinematics is a branch of mechanics that
deals with the features or properties of the motion of an object. It's often
refered to as the "Geometry of Motion". For charachter animation, we usually
deal with Kinematics of Simple Chains - or limbs…
&lt;/p&gt;

&lt;p&gt;
For a given arm, &lt;b&gt;Forward Kinematics&lt;/b&gt; is working out where the hand (or end) is
in space given the angles between the shoulder, and upper and lower arms. The
opposite of this, called &lt;b&gt;Inverse Kinematics&lt;/b&gt; (IK), is where you have a fixed
target point and instead want to choose the same angles so the hand is as close
to it as possible.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;b&gt;Forward Kinematics:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;Your upper arm is at \(\alpha\) to your torso, and your
upper arm is \(\beta\) to your lower arm, where is your hand?&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Inverse Kinematics:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;You want to reach for a ball infront of you, what
angles should you have at your shoulder and elbow?&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
We're going to look at the second one. Inverse Kinematics are used for all kinds
of charachter animation, robotics, and predicting people's location in VR. It'd
be pretty useful to have a way to solve it!
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;span class="align_all"&gt;
        &lt;div&gt;
            &lt;!-- Arm --&gt;
            &lt;canvas id="twolinkarmandgraph" class="light_border" width="400" height="300"&gt;
                Your browser doesn't support html5 canvas :c.
            &lt;/canvas&gt;&lt;!-- Sliders --&gt;&lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Shoulder Angle (a)&lt;/span&gt;
                &lt;span id="ang1" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang1val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Elbow Angle (b)&lt;/span&gt;
                &lt;span id="ang2" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang2val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/span&gt;
    &lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; The problem: Trying to reach for the ball by changing the angles of both joints. How can we find these angles?&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
{
    function UpdateGraph() {}
    // Create an arm in that space
    var armC = new ArmCanvas(document.getElementById('twolinkarmandgraph'), UpdateGraph);
    armC.targetX = 27;
    armC.targetY = 13;

    var arm = new Arm(2);
    armC.addArm(arm);

    this.arm = arm;

    // slider
    $("#ang1").slider({
        min: 0,
        max: 180,
        values: [arm.getAngle(0)],
        slide: function(event, ui) {
            $("#ang1val").text(ui.values[0] + "°")
            arm.setAngle(0, ui.values[0]);
        }
    });
    $("#ang1val").text(arm.getAngle(0) + "°");

    $("#ang2").slider({
        min: -160,
        max: 160,
        values: [arm.getAngle(1)],
        slide: function(event, ui) {
            $("#ang2val").text(ui.values[0] + "°");
            arm.setAngle(1, ui.values[0]);
        }
    });
    $("#ang2val").text(arm.getAngle(1) + "°");
}
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org59a88fd" class="outline-2"&gt;
&lt;h2 id="org59a88fd"&gt;Simple arms in 2d&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59a88fd"&gt;
&lt;p&gt;
For the 2D case, and when there's two joints in the arm, there are (usually) two solutions - an
'elbows up' position, and an 'elbows down' one.
&lt;/p&gt;

&lt;p&gt;
Unfortunately if the target is
too far away there is no way to reach, and similarly if the upper and lower
arms are different lengths, then there's also no solution.
&lt;/p&gt;

&lt;p&gt;
It's possible to work out these two angles with coordinate geometry or a bit of
trig, as long as you have the lengths of both arm segments and the target
location. However, as there's a million other gamedev sites, robotics courses,
and random medium posts, I'll won't explain it here again. It is a fun problem
though! I'd recommend giving it a go - it's hard to spot but doesn't require any
hard maths.
&lt;/p&gt;

&lt;p&gt;
TODO: Link src…
&lt;/p&gt;

&lt;p&gt;
It's also worth noting problems and limbs in 3D can be solved using the same 2D algorithm
with one trick: An 'elbow target'. We add a point that, given the choice, the
elbow will be as near to as possible. This (interestingly) causes all 5 points: Shoulder, Elbow,
Hand, Hand Target, and Elbow Target to all lie in the same plane. We can take
the plane defined by the fixed points: Shoulder, Hand Target, and Elbow Target
and solve the problem in 2d on that plane. This is how a lot of kinematics in
games is done.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5008e07" class="outline-2"&gt;
&lt;h2 id="org5008e07"&gt;Harder problems?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5008e07"&gt;
&lt;p&gt;
It's not possible to solve harder problems using the same idea however, if you
add an extra segment to the arm there suddenly isn't a way to find solutions.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>animation</category><category>gamedev</category><category>math</category><category>programming</category><guid>https://imois.in/posts/procedural-animation-3-gradient-descent/</guid><pubDate>Sun, 05 May 2019 00:00:50 GMT</pubDate></item></channel></rss>