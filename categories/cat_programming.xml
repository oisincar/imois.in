<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>im_oisin (Posts about Programming)</title><link>https://imois.in/</link><description></description><atom:link href="https://imois.in/categories/cat_programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:oisincar@gmail.com"&gt;Oisin Carroll&lt;/a&gt; </copyright><lastBuildDate>Tue, 06 Jul 2021 22:26:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>(Killer) Sudoku Solver</title><link>https://imois.in/posts/sudoku-solver/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-orgd0877a1" class="outline-2"&gt;
&lt;h2 id="orgd0877a1"&gt;(Killer) Sudoku Solver&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd0877a1"&gt;
&lt;p&gt;
A solver for killer and/or regular sudokus! It's written in rust and compiled to web assembly. It supports fixed digits and constraints on the sum of different cells.
&lt;/p&gt;

&lt;p&gt;
Enter digits into the grid, or add some sum-rules; a collection of cells which must sum to a given number. As in traditional killer sudoku rules, all cell values in a sum-rule must be unique. For more detailed instructions see below.
&lt;/p&gt;

&lt;div class="sudoku_container"&gt;
    &lt;!--&lt;div&gt;
        &lt;h2&gt;(Killer) Sudoku Solver&lt;/h2&gt;
        &lt;div&gt;
        &lt;p&gt;
        A solver for killer and/or regular sudokus! It's written in rust and compiled to web assembly. It supports fixed digits and constraints on the sum of different cells.
        &lt;/p&gt;
        &lt;p&gt;
        Enter digits into the grid, or add some sum-rules. For more detailed instructions see below.
        &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;--&gt;
    &lt;div&gt;
        &lt;button id="solve_button" type="button"&gt;Solve!&lt;/button&gt;
        &lt;button id="reset_button" type="button"&gt;Reset&lt;/button&gt;
    &lt;/div&gt;
    &lt;table id="sudokutr" class="sudoku_grid"&gt;&lt;/table&gt;
&lt;div class="sumrule_container"&gt;
        &lt;table id="sudokurules" class="sumrule_table"&gt;&lt;tr&gt;
&lt;th&gt;Cell ixs&lt;/th&gt;
&lt;th&gt;Sum To&lt;/th&gt; &lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;div&gt; &lt;button id="add_rule_button" type="button"&gt;+&lt;/button&gt; &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="module" src="https://imois.in/assets/js/sudoku/sudoku_board.js"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3cf258c" class="outline-3"&gt;
&lt;h3 id="org3cf258c"&gt;Fixed digits&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3cf258c"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;You can enter fixed digits by selecting the cell and entering a digit. You can enter more than one by click+draging or shift+clicking, and enter multiple digits at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org29de35f" class="outline-3"&gt;
&lt;h3 id="org29de35f"&gt;Sum constraints&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org29de35f"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Each cell has a corresponding index from \(0-81\). Constraints consist of any number of these indices and a sum they should make.&lt;/li&gt;
&lt;li&gt;To create a new constraint: select the desired cells and click the '+' button at the bottom. This will create a new row. You can then modify the sum value itself by clicking on it.&lt;/li&gt;
&lt;li&gt;Constraints can be edited by clicking on the corresponding `Cell ixs` entry, and reselecting squares.&lt;/li&gt;
&lt;li&gt;Unlike some other solvers, constraints can overlap arbitrarily.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4491aa8" class="outline-3"&gt;
&lt;h3 id="org4491aa8"&gt;Solving&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4491aa8"&gt;
&lt;p&gt;
Finally, when you have a board complete… Hit solve. The first solution found will be displayed, or a warning if no solution is possible.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7b78987" class="outline-3"&gt;
&lt;h3 id="org7b78987"&gt;The solver itself&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7b78987"&gt;
&lt;p&gt;
The solver's been a learning exercise for rust and as such - the code isn't excellent. There are some neat tricks in it though!
&lt;/p&gt;

&lt;p&gt;
It uses bitsets to improve performance, where possibilities for each cell are stored as a single binary number. If [1,3,5] were candidates for a square this is stored as \(000010101\) - where the least significant digit corresponding to 1 being a candidate etc. When a number is placed in a square it can be removed as a candidate from row/column/box efficiently using binary digits.
&lt;/p&gt;

&lt;p&gt;
Sums constraints are calculated and cached in a hashset. If a constraint required us to make 8 in 3 squares there are only two ways to do it: [1,2,5] and [1,3,4]… And is similarly stored as a mask: \(000011111\) - corresponding to all numbers that could make up a solution. This can be used to quickly mask squares. The calculation of these constraints is done quickly and lazily with some dynamic programming tricks - i.e. &lt;a href="https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/"&gt;knapsack&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
When a digit is placed in a cell two things happen - its value is removed as a candidate from row/column/box, then sum constraints containing the cell are updated and the resulting new mask is reapplied to the remaining squares.
&lt;/p&gt;

&lt;p&gt;
If those rules are enough to solve the puzzle - it's extremely fast. It can solve up to 2 million sudokus per second! Otherwise, it must guess a square and backtrack if it reaches a contradiction. It tries to guess the square with the fewest candidates.
&lt;/p&gt;

&lt;p&gt;
It's lack of more complex solving techniques; hidden singles, naked pairs etc. means it struggles to compare with the &lt;a href="https://github.com/t-dillon/tdoku"&gt;fastest solvers of the day&lt;/a&gt;. For comparison it solves ~900/second of the 'puzzles5_forum_hardest' puzzles in the previous link (best=24,001/sec), while averaging a whopping 1456 guesses/puzzle (best=64 guesses). Not too bad for a weekend though… And it may in fact be the fastest killer sudoku solver!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>programming</category><guid>https://imois.in/posts/sudoku-solver/</guid><pubDate>Wed, 16 Jun 2021 22:04:35 GMT</pubDate></item></channel></rss>