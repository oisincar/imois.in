<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>im_oisin ([Coding] animations!)</title><link>https://imois.in/</link><description></description><atom:link href="https://imois.in/categories/animation.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:oisincar@gmail.com"&gt;Oisin Carroll&lt;/a&gt; </copyright><lastBuildDate>Sun, 30 Oct 2022 17:29:59 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Procedural Animation 3: Gradient Descent</title><link>https://imois.in/posts/procedural-animation-3-gradient-descent/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-orgd6c88a4" class="outline-2"&gt;
&lt;h2 id="orgd6c88a4"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd6c88a4"&gt;
&lt;script type="text/javascript" src="https://unpkg.com/vis-graph3d@latest/dist/vis-graph3d.min.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/TouchUtils.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Global.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Arm.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/ArmCanvas.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/Graph.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/GradientDescent2Link.js"&gt;&lt;/script&gt;&lt;script src="https://imois.in/assets/js/procedural_animation/TwoLinkArmAndGraph.js"&gt;&lt;/script&gt;&lt;p&gt;
In this third and final section, we'll cover how to solve harder problems that don't
necessarily have a single solution, or ones that have solutions that can't be
written as an equation of known variables.
&lt;/p&gt;

&lt;p&gt;
If you haven't read &lt;a href="https://imois.in/posts/procedural-animation-1-state-machines/"&gt;Part 1&lt;/a&gt;, we covered some simple state machines and some
general ideas on how I try to approach these kind of problems.
&lt;/p&gt;

&lt;p&gt;
You might also want to check out &lt;a href="https://imois.in/posts/procedural-animation-2-functions"&gt;Part 2&lt;/a&gt;, where we went over how to build up more
complex movement by combining functions of state.
&lt;/p&gt;

&lt;p&gt;
And finally, all of the (interactive!) animations here are running in javascript canvas, so you can open the
source code in the inspector or find it on &lt;a href="https://github.com/oisincar/imois.in/tree/src/files/assets/js/procedural_animation"&gt;my github for the site!&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d864df" class="outline-2"&gt;
&lt;h2 id="org0d864df"&gt;What we'll make!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0d864df"&gt;
&lt;p&gt;
These tenticles/ arms/ vines might make a fun enemy or background in a game, but
also demonstrate an idea that can be used to solve all kinds of problems! The
same idea (gradient descent) is the backbone of a huge amount of modern AI -
used to improve Google's results, autonomous cars, and more… And all you
need to understand it is a basic knowledge of derivatives.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="intro-demo-arms" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; Reaching arms with 20 and 100 segments. Click &amp;amp; Drag to move the ball!&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
class GradientDescentLongChain {

    constructor(id) {
        var self = this;

        var armC = new ArmCanvas(
            document.getElementById(id),
            function(){self.finished = false;});

        this.arm = new Arm(20, 300, -250);
        this.arm2 = new Arm(100, 100, -50);

        armC.addArm(this.arm);
        armC.addArm(this.arm2);

        // Double arm length
        this.arm._lengths = this.arm._lengths.map(function(x) { return x*1.7; });
        this.arm2._angles = this.arm2._angles.map(function(x) { return 0; });

        var doUpdate = true;
        if (doUpdate)
            setInterval(function() { self.update(); }, self.interval);
    }

    improve(arm) {
        // var grads = this.arm.calculateCurrentGradients();
        var grads = arm.calculateCurrentGradientsSq();

        // Update arm angles!
        for (var i = 0; i &lt; grads.length; i++) {
            arm.changeAngle(i, -grads[i]*0.00001);
        }

        // If we're now close enough, don't update til we have to again.
        if (arm.getCurrentError() &lt; 0.05) {
            return true;
        }
        return false;
    }

    update() {
        // Only do stuff if we're not already at the target.
        if (!this.finished) {
            // Finished if both arms are finished
            var a1 = this.improve(this.arm);
            var a2 = this.improve(this.arm2);
            this.finished = a1 &amp;&amp; a2;
        }
    }
}

var b = new GradientDescentLongChain('intro-demo-arms');
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4ea21b3" class="outline-2"&gt;
&lt;h2 id="org4ea21b3"&gt;The problem: Kinematics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4ea21b3"&gt;
&lt;p&gt;
Generally, (and according to google) kinematics is a branch of mechanics that
deals with the features or properties of the motion of an object. It's often
referred to as the "Geometry of Motion". For character animation, we usually
deal with Kinematics of Simple Chains - or limbs…
&lt;/p&gt;

&lt;p&gt;
For a given arm, &lt;b&gt;Forward Kinematics&lt;/b&gt; is working out where the hand (or end) is
in space given the angles between the shoulder, and upper and lower arms. The
opposite of this, called &lt;b&gt;Inverse Kinematics&lt;/b&gt; (IK), is where you have a fixed
target point and instead want to choose the same angles so the hand is as close
to it as possible.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;b&gt;Forward Kinematics:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;Your upper arm is at \(\alpha\) to your torso, and your
upper arm is \(\beta\) to your lower arm, where is your hand?&lt;/dd&gt;

&lt;dt&gt;&lt;b&gt;Inverse Kinematics:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;You want to reach for a ball in-front of you, what
angles should you have at your shoulder and elbow?&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
We're going to look at the second one. Inverse Kinematics are used for all kinds
of character animation, robotics, and predicting people's location in VR. It'd
be pretty useful to have a way to solve it!
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;span class="align_all"&gt;
        &lt;div&gt;
            &lt;!-- Arm --&gt;
            &lt;canvas id="twolinkarmandgraph_smp" class="light_border" width="400" height="300" style="max-width: 85vw;"&gt;
                Your browser doesn't support html5 canvas :c.
            &lt;/canvas&gt;&lt;!-- Sliders --&gt;&lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Shoulder Angle (α)&lt;/span&gt;
                &lt;span id="ang1_smp" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang1val_smp" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Elbow Angle (β)&lt;/span&gt;
                &lt;span id="ang2_smp" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang2val_smp" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/span&gt;
    &lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; The problem: Trying to reach for the ball by changing the angles of both joints. How can we find these angles?&lt;/p&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;
{
    function UpdateGraph() {}
    // Create an arm in that space
    var armC = new ArmCanvas(document.getElementById('twolinkarmandgraph_smp'), UpdateGraph);
    armC.targetX = 27;
    armC.targetY = 13;

    var arm = new Arm(2);
    armC.addArm(arm);

    this.arm = arm;

    // slider
    $("#ang1_smp").slider({
        min: 0,
        max: 180,
        values: [arm.getAngle(0)],
        slide: function(event, ui) {
            $("#ang1val_smp").text(ui.values[0] + "°")
            arm.setAngle(0, ui.values[0]);
        },
    });
    $("#ang1val_smp").text(arm.getAngle(0) + "°");

    $("#ang2_smp").slider({
        min: -160,
        max: 160,
        values: [arm.getAngle(1)],
        slide: function(event, ui) {
            $("#ang2val_smp").text(ui.values[0] + "°");
            arm.setAngle(1, ui.values[0]);
        }
    });
    $("#ang2val_smp").text(arm.getAngle(1) + "°");
}
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org270054b" class="outline-2"&gt;
&lt;h2 id="org270054b"&gt;Simple arms in 2d&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org270054b"&gt;
&lt;p&gt;
For the 2D case, and when there are only two joints in the arm, there are (usually) two solutions - an
'elbows up' position, and an 'elbows down' one.
&lt;/p&gt;

&lt;p&gt;
Of course, there are cases where there is no solution. If the ball is out of
reach, for example.
&lt;/p&gt;

&lt;p&gt;
It's possible to work out these two angles with coordinate geometry or a bit of
trig, as long as you have the lengths of both arm segments and the target
location. However, as there are a million other gamedev sites, robotics courses,
and random medium posts, I won't explain it here again. It is a fun problem
though - I'd recommend giving it a go!
&lt;/p&gt;

&lt;p&gt;
It's also worth noting problems and limbs in 3D can be solved using the same 2D algorithm/equation
with one trick: An 'elbow target'. We add a point that, given the choice, the
elbow will be as near to as possible. This (interestingly) causes all 5 points: Shoulder, Elbow,
Hand, Hand Target, and Elbow Target to all lie in the same plane. We can take
the plane defined by the fixed points: Shoulder, Hand Target, and Elbow Target
and solve the problem in 2d on that plane. This is how a lot of kinematics in
games is done.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2ec0de8" class="outline-2"&gt;
&lt;h2 id="org2ec0de8"&gt;Harder problems.. I.e. Arms with more joints..?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2ec0de8"&gt;
&lt;p&gt;
It's not possible to solve harder problems using the same idea however, if you
add an extra segment to the arm there suddenly isn't a way to find solutions
(mostly because there are now likely infinite solutions…).
&lt;/p&gt;

&lt;p&gt;
This is what I wanted to write about… How can you find approximate or fast
solutions to a problem that's much harder to solve exactly, or find 'organic'
solutions to some problem that has a lot of possible solutions.
&lt;/p&gt;

&lt;p&gt;
Instead of trying to find a solution instantly, we take the current position of
the arm and figure out how to improve it slightly. The solution is then
calculated iteratively, looping over and over either until we're not getting
any closer or we're within some distance.
&lt;/p&gt;

&lt;p&gt;
Because we're only 3 dimensional creatures… The solution is easiest to
describe for arms with 2 joints… But the maths works for any number of joints.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1447e92" class="outline-2"&gt;
&lt;h2 id="org1447e92"&gt;Forward Kinematics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1447e92"&gt;
&lt;p&gt;
First, we need to work out where the end of our arm is… We write the angle at
the shoulder as \(\alpha\), and at the elbow as \(\beta\). The length of the upper
arm is \(l1\), and forearm is \(l2\). I take the shoulder to be at \((0,0)\)
&lt;/p&gt;

&lt;p&gt;
To do this, we can split it into 2 parts. The position of the elbow will be at:
&lt;/p&gt;

\begin{align*}
Elbow_x &amp;amp; = l1 * sin(\alpha) \\
Elbow_y &amp;amp; = l1 * cos(\alpha)
\end{align*}

&lt;p&gt;
Then, similarly, we can work out the position of the hand relative to the elbow.
This is a little harder to see, but we can take the angle of the arm relative to
the ground (\(\alpha + \beta\)) and use the same trig formula.
&lt;/p&gt;

\begin{align*}
Hand_x - Elbow_x &amp;amp; = l2 * sin(\alpha + \beta) \\
Hand_y - Elbow_y &amp;amp; = l2 * cos(\alpha + \beta)
\end{align*}

&lt;p&gt;
Then the position of the hand is simply the sum.
&lt;/p&gt;

\begin{align*}
Hand_x &amp;amp; = l1 * sin(\alpha) + l2 * sin(\beta - \alpha) \\
Hand_y &amp;amp; = l1 * cos(\alpha) + l2 * cos(\beta - \alpha)
\end{align*}
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3baa0e8" class="outline-2"&gt;
&lt;h2 id="org3baa0e8"&gt;Distance function&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3baa0e8"&gt;
&lt;p&gt;
In order to perform gradient descent, we need a formula for the error we're
trying to reduce. This is the distance from our hand to our target. Ideally, we
want this distance to be 0, which'd mean our hand is exactly on the target.
&lt;/p&gt;

&lt;p&gt;
The distance in x and y can be written from the above. Here \(|x|\) means the
absolute value of x, or the non-negative value of x.
&lt;/p&gt;

\begin{align*}
Dist_x &amp;amp; = | Target_x - (l1 * sin(\alpha) + l2 * sin(\alpha + \beta)) | \\
Dist_y &amp;amp; = | Target_y - (l1 * cos(\alpha) + l2 * cos(\alpha + \beta)) |
\end{align*}

&lt;p&gt;
Then using pythagoras the distance is:
&lt;/p&gt;

\begin{align*}
Dist = \sqrt{Dist_x^2 - Dist_y^2}
\end{align*}

&lt;p&gt;
We can look at this distance for any value of \(\alpha\) and \(\beta\). If we plot
\(\alpha\) and \(\beta\) on the x and y coordinates of a graph, and the
corresponding distance the arm is from the target the z (vertical) axis, we can
view the distance as a shape.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;span class="align_all"&gt;
        &lt;div&gt;
            &lt;!-- Arm --&gt;
            &lt;canvas id="twolinkarmandgraph" class="light_border" width="600" height="300" style="max-width: 85vw;"&gt;
                Your browser doesn't support html5 canvas :c.
            &lt;/canvas&gt;&lt;!-- Sliders --&gt;&lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Shoulder Angle (α)&lt;/span&gt;
                &lt;span id="ang1" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang1val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Elbow Angle (β)&lt;/span&gt;
                &lt;span id="ang2" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="ang2val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Upper Arm Len&lt;/span&gt;
                &lt;span id="l1" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="l1val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

            &lt;span class="slider_row"&gt;
                &lt;span class="slider_label"&gt;Forearm Len&lt;/span&gt;
                &lt;span id="l2" class="flat-slider"&gt;&lt;/span&gt;
                &lt;span type="text" id="l2val" class="slider_text"&gt;&lt;/span&gt;
            &lt;/span&gt;

        &lt;/div&gt;
        &lt;div id="mygraph" style="max-width: 85vw;"&gt;&lt;/div&gt;
    &lt;/span&gt;
    &lt;script&gt; var a = new TwoLinkArmAndGraph(); &lt;/script&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 2:&lt;/span&gt; The distance function for any of the shoulder and elbow angles.
    On the graph: Click to pan, scroll wheel to zoom, and mouse over to see the distance/angles at any point. Try messing around
    with the angles and arm lengths, or move the target ball!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Each point on the surface corresponds to some shoulder and elbow angles, and the
height (or colour) there corresponds to the distance those angles put the hand
from the target. As you change the angles of the arms, you can see the graph
translate - the center of it shows the current elbow and shoulder angles.
&lt;/p&gt;

&lt;p&gt;
Try tweaking lengths, then read the lowest/highest point from the graph… Then change
the arm's angles to those and see what it looks like.
&lt;/p&gt;

&lt;p&gt;
There's often two low points in the graph - which correspond to the two best
 solutions. Moving the ball far away gives only one low point - meaning there's
 only one best solution; when the arm is pointing towards it.
 There's also usually one worst solution (the reddest/ highest point), which
 is where the arm is pointing away from the ball.
&lt;/p&gt;

&lt;p&gt;
Our goal will be effectively to try and find the lowest point on this surface -
the angles there will bring our arm closest to our target ball.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga4c3ca4" class="outline-2"&gt;
&lt;h2 id="orga4c3ca4"&gt;Gradient Descent&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga4c3ca4"&gt;
&lt;p&gt;
We can use the derivative of this distance function to improve our errors.
First, write the distance corresponding to \(\alpha\) and \(\beta\) as \(Dist(\alpha, \beta)\).
&lt;/p&gt;

&lt;p&gt;
Then we can consider the partial derivative with respect to the angles.
&lt;/p&gt;

\begin{align*}
\frac{\partial Dist}{\partial \alpha}
\end{align*}

&lt;p&gt;
This works out to a single value, and can be read/ thought of as 'how does the
distance to the target change when I change \(\alpha\) by a very small amount'.
&lt;/p&gt;

&lt;p&gt;
For example if \(\frac{\partial Dist}{\partial \alpha}\) is positive, then
increasing \(\alpha\) will increase the distance. Decreasing \(\alpha\) then brings the
hand towards the target. If the derivative is negative, we
should instead increase \(\alpha\) by a small amount to improve our hand position.
This can be written as:
&lt;/p&gt;

\begin{align*}
\alpha := \alpha - k * \frac{\partial Dist}{\partial \alpha}
\end{align*}

&lt;p&gt;
Here k is a small value, in the animations I have it set to 0.0001. This means
each update loop we update alpha to move the hand a little closer.
&lt;/p&gt;

&lt;p&gt;
The maths is exactly the same for the elbow position:
&lt;/p&gt;

\begin{align*}
\beta := \beta - k* \frac{\partial Dist}{\partial \beta}
\end{align*}

&lt;p&gt;
And for any number of limbs.
&lt;/p&gt;

&lt;p&gt;
This method of improving iteratively is called 'gradient descent'. This can be visualized from Anim 2; we're essentially standing on a point on the surface, then finding the direction of steepest descent and moving a short distance.
Repeating this process will, in many problems (including this one), always get us to a solution if it exists.
&lt;/p&gt;

&lt;p&gt;
Proving that this method finds the direction of steepest descent, or that this problem is convex and so will always find a possible solution is left as an exercise to the reader :)
&lt;/p&gt;

&lt;p&gt;
The demos just perform this update once per frame, but it's easy to completely solve the system by running for more iterations.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1c3d8a2" class="outline-2"&gt;
&lt;h2 id="org1c3d8a2"&gt;Implementation &amp;amp; Extras&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1c3d8a2"&gt;
&lt;p&gt;
It might help to look through the source code for the animations (embedded into
this page), or available &lt;a href="https://github.com/oisincar/imois.in/blob/master/assets/js/procedural_animation/Arm.js"&gt;here on Github&lt;/a&gt;. You're free to lift this for anything,
the code's CC0!
&lt;/p&gt;

&lt;p&gt;
Here's a bonus of what happens when you accidentally make 3 arms compete for who
renders at the same time…
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;!-- Arm --&gt;
    &lt;canvas id="twolinkgrad_arm_canvas_broken" class="light_border" width="500" height="400" style="max-width: 85vw;"&gt;
        Your browser doesn't support html5 canvas :c.
    &lt;/canvas&gt;&lt;script&gt;
      new GradientDescent2Link('twolinkgrad_arm_canvas_broken', 2);
      new GradientDescent2Link('twolinkgrad_arm_canvas_broken', 4);
      new GradientDescent2Link('twolinkgrad_arm_canvas_broken', 15);
    &lt;/script&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 3:&lt;/span&gt; Glitchy movement, could be a neat effect for a Stranger Things monster..?&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Anyway, I hope this helped! Gradient descent is a very powerful tool for solving
any kind of problem if you're able to express it in a certain way. For more
procedural animation stuff, you might be interested in &lt;a href="https://imois.in/posts/procedural-animation-1-state-machines/"&gt;Part 1&lt;/a&gt; where I looked at
some core ideas and a light animation, or &lt;a href="https://imois.in/posts/procedural-animation-2-functions"&gt;Part 2&lt;/a&gt; with some more fancy function
ideas and shapes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>animation</category><category>gamedev</category><category>math</category><category>programming</category><guid>https://imois.in/posts/procedural-animation-3-gradient-descent/</guid><pubDate>Tue, 26 Nov 2019 00:22:20 GMT</pubDate></item><item><title>Procedural Animation 2: Functions</title><link>https://imois.in/posts/procedural-animation-2-functions/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-org1626ffd" class="outline-2"&gt;
&lt;h2 id="org1626ffd"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1626ffd"&gt;
&lt;p&gt;
In this second section, I wanted to talk about functions… And how to take simple
movements and build more complex animations from them. Be warned: &lt;i&gt;Here be graphs&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
We'll be using the idea of &lt;b&gt;State&lt;/b&gt;, &lt;b&gt;Update&lt;/b&gt;, &lt;b&gt;Apply&lt;/b&gt; from &lt;a href="https://imois.in/posts/procedural-animation-1-state-machines/"&gt;Part 1&lt;/a&gt; here too. If
you haven't read that, you might want to start there!
&lt;/p&gt;

&lt;p&gt;
And finally, all of the animations are running in javascript canvas, so you can open the
source code in the inspector or find it on &lt;a href="https://github.com/oisincar/imois.in/tree/src/files/assets/js/procedural_animation"&gt;my github for the site!&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfb9776c" class="outline-2"&gt;
&lt;h2 id="orgfb9776c"&gt;Bouncing ball&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfb9776c"&gt;
&lt;p&gt;
How to make this?
&lt;/p&gt;

&lt;script src="https://imois.in/assets/js/procedural_animation/BouncingBalls.js"&gt;&lt;/script&gt;&lt;div class="figure"&gt;
    &lt;canvas id="balls0" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; Moving the ball&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls0', 0, 1); &lt;/script&gt;&lt;p&gt;
For the &lt;b&gt;State&lt;/b&gt;, we can just have a single number that varies from 0 to 1:
The percentage through the animation we are so far.
&lt;/p&gt;

&lt;p&gt;
This means our &lt;b&gt;Update&lt;/b&gt; can turn the elapsed time into a percentage value and
add it to the &lt;b&gt;State&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
And our &lt;b&gt;Apply&lt;/b&gt; can move the ball based on the state variables, and draw it. For
this, we only need to change the y coordinate:
&lt;/p&gt;

&lt;p&gt;
y = state*k, where k a scaling value for how far the ball moves.
&lt;/p&gt;


&lt;p&gt;
In code this looks like:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// CONFIG:&lt;/span&gt;
&lt;span class="c1"&gt;// 'scale in time', length of animation&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 'scale in space', distance ball moves&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;40.0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 'offset in space'&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt; &lt;span class="n"&gt;_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;(..);&lt;/span&gt;

&lt;span class="c1"&gt;// STATE:&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// dt is the change in time.&lt;/span&gt;
    &lt;span class="c1"&gt;// UPDATE state:&lt;/span&gt;
    &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// 1_|&lt;/span&gt;
    &lt;span class="c1"&gt;//   | /| /| /| /|....&lt;/span&gt;
    &lt;span class="c1"&gt;// 0_|/ |/ |/ |/ |&lt;/span&gt;

    &lt;span class="c1"&gt;// APPLY&lt;/span&gt;
    &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_offset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The update line can be a bit confusing, but might make more sense when split up a bit more.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Equilivent to (all of):&lt;/span&gt;
&lt;span class="c1"&gt;// The change in how far we are through the animation.&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dPerc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Added to _animationPerc&lt;/span&gt;
&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dPerc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// And wrap back to 0 if we're &amp;gt; 1;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We're working out how much further we are through the animation (```dPerc```)
which is our change it time divided by the duration of the animation. Say our
animation is 2 seconds long, and 1 second just elapsed… We're now half-way
further through than before.
&lt;/p&gt;

&lt;p&gt;
It might be helpful to think of the shape this variable (or all variables) make over time. A
lot of these animations can be thought of as the &lt;b&gt;Apply&lt;/b&gt; function reshaping the &lt;b&gt;State&lt;/b&gt; variables.
&lt;/p&gt;



&lt;div id="org750b17f" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/animation_perc.png" alt="animation_perc.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;The shape of _animationPerc over time, where d is the duration of the animation, makes a sawtooth shape.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
In this example, our &lt;b&gt;Apply&lt;/b&gt; function just scales the &lt;b&gt;State&lt;/b&gt; by _dist. This is
then the y offset of the ball for that frame, as shown in the animation above.
&lt;/p&gt;


&lt;div id="org44ed7f5" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/animation_apply1.png" alt="animation_apply1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2: &lt;/span&gt;Here, the input &lt;b&gt;State&lt;/b&gt; (Blue), is scaled to give the ball's positional offset by the &lt;b&gt;Apply&lt;/b&gt; function (Orange).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgbfa9d9b" class="outline-2"&gt;
&lt;h2 id="orgbfa9d9b"&gt;Different Applications (heh)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbfa9d9b"&gt;
&lt;p&gt;
By just changing the &lt;b&gt;Apply&lt;/b&gt; function here, we can get a variety of different
movements. We can think of these movements as transformations of the origional
&lt;b&gt;State&lt;/b&gt; graph, since this is the only input.
&lt;/p&gt;

&lt;p&gt;
First lets move the ball up and down in wave like this…
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls1" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 2:&lt;/span&gt; Wavey ball&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls1', 1, 1); &lt;/script&gt;&lt;p&gt;
Here, since \(sin(x)\) has a period of \(2*\pi\), we need to scale our state
variable by that so it loops properly.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://imois.in/posts/"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
In code, this is as easy as:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
By doing this to both the x and y axis at the same time, offset by a bit, we can get a circle!
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls2" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 3:&lt;/span&gt; Circles&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls2', 2, 1); &lt;/script&gt;&lt;p&gt;
Which, again, in code is just:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_animationPerc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// NOTE Equilivent to: ball.y = sin(2 * Math.PI * _animationPerc + Math.PI);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This idea can be taken much further, and leads to some really cool movements!
The &lt;a href="https://en.wikipedia.org/wiki/Lissajous_curve"&gt;Lissajous Curves&lt;/a&gt; are created when you scale the x and y parts differently in
a way very similar to above ^. That's a whole different blog post though!
&lt;/p&gt;


&lt;div id="org37f5eb8" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/1lissajous.gif" alt="1lissajous.gif" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3: &lt;/span&gt;The different shapes that can be made by scaling the inputs to sin/cos into different ratios. If these were animated like the ball above, the ball would follow the shape.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org965e229" class="outline-2"&gt;
&lt;h2 id="org965e229"&gt;Zigzag&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org965e229"&gt;
&lt;p&gt;
This is a slighly harder example for the idea of manipulating function shapes.
&lt;/p&gt;

&lt;p&gt;
We start off with our input shape as before… And keeping in mind our goal output shape (to get
the animation above).
&lt;/p&gt;

&lt;div id="orgb0a955e" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/zigzag0.png" alt="zigzag0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 4: &lt;/span&gt;Input _animationPerc (Blue), compared to the shape we need (Orange).&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
We can perform several steps to transform it into the right shape… Scaling it
up by 2 and moving it down by 1 (Orange). Then we can take the absolute value of
this (Green).
&lt;/p&gt;

&lt;div id="org03d548a" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/zigzag1.png" alt="zigzag1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 5: &lt;/span&gt;Input (Blue), scaled &amp;amp; transformed (Orange), result (Green)&lt;/p&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;zigzag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zigzag&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org58c58c2" class="outline-2"&gt;
&lt;h2 id="org58c58c2"&gt;Bouncing balls&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org58c58c2"&gt;
&lt;p&gt;
In order to create a realistic bounce, we have to first construct the right
shape function again. Without delving into the physics of it, we're looking for
a Parabola: Some function of \(t^2\).
&lt;/p&gt;


&lt;div id="org22ac3d6" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/bounce0.png" alt="bounce0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 6: &lt;/span&gt;Input (Blue), vs bounce shape (Orange)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Interestingly, we can get this shape from our zigzag before, by applying an
extra transformation: 1-zigzag&lt;sup&gt;2&lt;/sup&gt;.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls4" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 5:&lt;/span&gt; Bouncing balls&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls4', 4, 1); &lt;/script&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// APPLY&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;zigzag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mathf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_animationPerc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zigzag&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;zigzag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_dist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgef7c59b" class="outline-2"&gt;
&lt;h2 id="orgef7c59b"&gt;More Ideas&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgef7c59b"&gt;
&lt;p&gt;
We can clamp zigzag so it's 1 for some time, which means
the ball will sit on the ground for a bit… By animating the scaling too, maybe this could
be an animation for a slime NPC?
&lt;/p&gt;


&lt;div id="orgbd2d55b" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/bounce1.png" alt="bounce1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 7: &lt;/span&gt;Basic zigzag curve (Blue), zigzag/0.8 and clamped between 0 and 1 (Orange), and finally the output shape - bouncing ball with a pause (Green).&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
And how it looks animated…
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls5" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 6:&lt;/span&gt; Bouncing balls&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls5', 5, 1); &lt;/script&gt;&lt;p&gt;
And also we can have loads of balls by just adding an offset for the &lt;b&gt;State&lt;/b&gt;
value to each one! With some polish this could maybe make a kind of snake creature for a game…
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="balls6" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 7:&lt;/span&gt; Bouncing balls&lt;/p&gt;
&lt;/div&gt;
&lt;script&gt; new BouncingBalls('balls6', 6, 10); &lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc65c1a7" class="outline-2"&gt;
&lt;h2 id="orgc65c1a7"&gt;Other applications&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc65c1a7"&gt;
&lt;p&gt;
While here, I've only done animations by moving things, it's also possible to
animate rotations, shaders, skeletons, and more with exactly the same ideas.
&lt;/p&gt;

&lt;p&gt;
Tune in for part 3 when I'll cover a more complicated idea: Using
gradient descent for solving constraints in procedural animation (but with fun
interactive animations!!).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>animation</category><category>gamedev</category><category>programming</category><guid>https://imois.in/posts/procedural-animation-2-functions/</guid><pubDate>Sat, 27 Apr 2019 23:00:48 GMT</pubDate></item><item><title>Procedural Animation 1: State Machines</title><link>https://imois.in/posts/procedural-animation-1-state-machines/</link><dc:creator>Oisin Carroll</dc:creator><description>&lt;div id="outline-container-org8331e2e" class="outline-2"&gt;
&lt;h2 id="org8331e2e"&gt;Intro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8331e2e"&gt;
&lt;p&gt;
This is the first in a 3 part series on procedural animation, all taken from a talk
I gave in January of 2019. The posts ramp up in complexity, and I've tried to make
the animations interactive where possible!
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;This first post justifies and covers a general mentality I have for working on
procedural animations, and applies it to a simple example.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://imois.in/posts/procedural-animation-2-functions/"&gt;The second post&lt;/a&gt; gives a more powerful and harder tool - talking about function
shapes, and how you can build more complex behavour by combining simple movements.&lt;/li&gt;
&lt;li&gt;The third and final post (coming soon) covers inverse kinematics, and generally how to
approximate solutions much harder problems using gradient descent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All of the animations are running in javascript canvas, so you can open the
source code in the inspector or find it on &lt;a href="https://github.com/oisincar/imois.in/tree/src/files/assets/js/procedural_animation"&gt;my github for the site!&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org12b62b3" class="outline-2"&gt;
&lt;h2 id="org12b62b3"&gt;Differences vs traditional animation.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org12b62b3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Advantages:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Greater (infinite?) variety.
Simulate large numbers easily.&lt;/li&gt;
&lt;li&gt;Can react to player/ world better.&lt;/li&gt;
&lt;li&gt;When done well: More realistic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;Disadvantages:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Loss of control. Can be harder to tweak.&lt;/li&gt;
&lt;li&gt;Hard to get very charachterful movement. Can look robotic
(Unless that's intentional…)&lt;/li&gt;
&lt;li&gt;When it breaks it often breaks hard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1a3dd81" class="outline-2"&gt;
&lt;h2 id="org1a3dd81"&gt;State, Update &amp;amp; Apply&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1a3dd81"&gt;
&lt;p&gt;
This is the core of how I approach these animations. I find it's helpful to try
and break down the system into 3 parts - State, Update, and Apply. These
systems can very easily become hard to tweak and work with, and this is just one
tool that might help with that.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;
&lt;b&gt;State&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;One or more variables, no logic.&lt;/li&gt;
&lt;li&gt;All we need to know to draw a frame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;b&gt;Update&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Changes (only) state variables on each frame or update cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;b&gt;Apply&lt;/b&gt;:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Move and/or draw stuff according to state.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Each part can be thought about separately, and by moving the state into a clear
separate variable the system becomes much easier to reason about. Animations
won't go out of sync, and it's to debug as you can just view and edit the state directly.
&lt;/p&gt;

&lt;p&gt;
Anyway… Lets look at an example!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org41064e4" class="outline-2"&gt;
&lt;h2 id="org41064e4"&gt;Example: Light&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org41064e4"&gt;
&lt;p&gt;
State machines are one of the simplest forms of procedural animation. The idea
is there is a single 'state' we're in, and also a set of
rules for why/ when we change state. State machines are often used in game AI -
where states might be { &lt;b&gt;Defend&lt;/b&gt;, &lt;b&gt;Rush&lt;/b&gt;, &lt;b&gt;Flank&lt;/b&gt; }, or for a character: { &lt;b&gt;Falling&lt;/b&gt;,
&lt;b&gt;Walking&lt;/b&gt;, &lt;b&gt;Sprinting&lt;/b&gt;, &lt;b&gt;Attacking&lt;/b&gt; }.
&lt;/p&gt;

&lt;p&gt;
Here we've just got a light, our &lt;b&gt;State&lt;/b&gt; is one of: { &lt;b&gt;On&lt;/b&gt;, &lt;b&gt;Off&lt;/b&gt; }.
&lt;/p&gt;

&lt;div class="figure"&gt;
    &lt;canvas id="lightswitch" class="light_border" width="400" height="300"&gt; Your browser sucks :c. &lt;/canvas&gt;&lt;p&gt;&lt;span class="figure-number"&gt;Anim 1:&lt;/span&gt; Randomly flickering light.&lt;/p&gt;
&lt;/div&gt;
&lt;script src="https://imois.in/assets/js/procedural_animation/LightSwitch.js"&gt;&lt;/script&gt;&lt;p&gt;
The second part of State, Update, Apply: &lt;b&gt;Update&lt;/b&gt;, is also simple. We randomly
choose to either stay in the current state or move to the other. I found
a \(98\%\) chance to stay &lt;b&gt;On&lt;/b&gt; and a \(93\%\) chance to stay &lt;b&gt;Off&lt;/b&gt; works decently.
&lt;/p&gt;

&lt;p&gt;
We can view the state and the transitions as a graph, where the arrows denote
probabilities.
&lt;/p&gt;


&lt;div id="orga8b4c05" class="figure"&gt;
&lt;p&gt;&lt;img src="https://imois.in/images/procedural_anim/light_state.png" alt="light_state.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1: &lt;/span&gt;Light state diagram&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
And finally, our Apply section simply determines if we should draw a circle that
frame, or leave the frame blank.
&lt;/p&gt;

&lt;p&gt;
Overall, our code looks like this…
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// STATE&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// UPDATE:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.93&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="n"&gt;_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// APPLY:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
	&lt;span class="c1"&gt;// Draw here!!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Tune in next time for some more interesting examples!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><category>animation</category><category>gamedev</category><category>programming</category><guid>https://imois.in/posts/procedural-animation-1-state-machines/</guid><pubDate>Thu, 25 Apr 2019 23:00:48 GMT</pubDate></item></channel></rss>